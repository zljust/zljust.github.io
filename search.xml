<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Welcome To My Blog</title>
      <link href="/2019/06/19/Welcome/"/>
      <url>/2019/06/19/Welcome/</url>
      
        <content type="html"><![CDATA[<p>$ \Huge\color{blue} Welcome $ $ \Huge\color{blue} To $ $ \Huge\color{blue} My $ $ \Huge\color{blue} Blog $<br>花了一个晚上，好累呀<br>$QWQ$</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>题解 P1438 【无聊的数列】</title>
      <link href="/2019/06/19/P14398/"/>
      <url>/2019/06/19/P14398/</url>
      
        <content type="html"><![CDATA[<p>发现题解中全都用差分的,只有一个不是 <del>(居然撞思路了</del><br>但他没有仔细讲他的思路,与思考过程,那我就为他补充一下吧  </p><h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><p>遇到这种题型不用慌,要不是差分,要不就是<strong>拆</strong>,也可以称为<strong>分离常数</strong>,我们假设原数列中有一个数$a[i]$,我们再$[l,r]$$(i$属于$[l,r])$中加了一个首项为$k$,公差为$d$的数列,那么我们易知<br>$a[i]=a[i]+k+(i-l)<em>d$<br>继续化简得<br>$a[i]=a[i]+k-d</em>l+i<em>d=a[i]+(k-d</em>l)+i<em>d$<br>我们发现 <em>*对于括号中的部分</em></em> 与这个数所在的位置无关,也就意味着可以将这个区间直接加上这个数,而对于另一部分,我们把$i$与$d$拆开,用另一个线段树维护$d$,因为是单点查询,我们只要将维护的$d[i]$乘上当前位置$i$,再加上第一个维护的线段树的查询结果就可以了<br>为了方便我写了一个模板，避免了写两棵线段树<br>$Code$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> T <span class="hljs-title">read</span><span class="hljs-params">(T&amp; a)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> c,f=<span class="hljs-number">1</span>;  a=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>((c=getchar()))  &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">'-'</span>) f=<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(c&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>) <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">do</span> &#123;<br>        a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">'0'</span>;<br>        c=getchar();<br>    &#125;<span class="hljs-keyword">while</span>(c&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>);<br>    <span class="hljs-keyword">return</span> a*=f;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">100000</span> + <span class="hljs-number">5</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tree</span> &#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> s[maxn&lt;&lt;<span class="hljs-number">2</span>],add[maxn&lt;&lt;<span class="hljs-number">2</span>];<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o)</span> </span>&#123; <span class="hljs-keyword">return</span> o&lt;&lt;<span class="hljs-number">1</span>; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o)</span> </span>&#123; <span class="hljs-keyword">return</span> (o&lt;&lt;<span class="hljs-number">1</span>)|<span class="hljs-number">1</span>; &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">memset</span>(s,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> s); <span class="hljs-built_in">memset</span>(add,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> add); &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o,<span class="hljs-keyword">int</span> L,<span class="hljs-keyword">int</span> R)</span> </span>&#123;<br>        add[o]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(L==R) <span class="hljs-keyword">return</span> read(s[o]);<br>        <span class="hljs-keyword">int</span> mid=(L+R)&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> s[o]=build(lc(o),L,mid)+build(rc(o),mid+<span class="hljs-number">1</span>,R);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o,<span class="hljs-keyword">int</span> L,<span class="hljs-keyword">int</span> R,<span class="hljs-keyword">int</span> _add)</span> </span>&#123;<br>        s[o]+=(R-L+<span class="hljs-number">1</span>)*_add; add[o]+=_add;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o,<span class="hljs-keyword">int</span> L,<span class="hljs-keyword">int</span> R)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!add[o]) <span class="hljs-keyword">return</span> ;<br>        <span class="hljs-keyword">int</span> mid=(L+R)&gt;&gt;<span class="hljs-number">1</span>;<br>        change(lc(o),L,mid,add[o]); change(rc(o),mid+<span class="hljs-number">1</span>,R,add[o]);<br>        add[o]=<span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updata</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o,<span class="hljs-keyword">int</span> L,<span class="hljs-keyword">int</span> R,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> _add)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(l&lt;=L&amp;&amp;r&gt;=R) <span class="hljs-keyword">return</span> change(o,L,R,_add);<br>        pushdown(o,L,R);<br>        <span class="hljs-keyword">int</span> mid=(L+R)&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(l&lt;=mid) updata(lc(o),L,mid,l,r,_add);<br>        <span class="hljs-keyword">if</span>(r&gt;mid) updata(rc(o),mid+<span class="hljs-number">1</span>,R,l,r,_add);<br>        s[o]=s[lc(o)]+s[rc(o)];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o,<span class="hljs-keyword">int</span> L,<span class="hljs-keyword">int</span> R,<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(L==R) <span class="hljs-keyword">return</span> s[o];<br>        pushdown(o,L,R);<br>        <span class="hljs-keyword">int</span> mid=(L+R)&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(x&lt;=mid) <span class="hljs-keyword">return</span> query(lc(o),L,mid,x);<br>        <span class="hljs-keyword">return</span> query(rc(o),mid+<span class="hljs-number">1</span>,R,x);<br>    &#125;<br><br>&#125;;<br><br><span class="hljs-keyword">int</span> n,m;<br>Tree t1,t2;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> c,l,r,k,d;<br>    read(n); read(m);<br>    t1.build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n); t2.clear();<br>    <span class="hljs-keyword">while</span>(m--) &#123;<br>        read(c); read(l);<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-number">1</span>) &#123;<br>            read(r); read(k); read(d);<br>            t1.updata(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,l,r,k-l*d);<br>            t2.updata(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,l,r,d);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,t1.query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,l)+t2.query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,l)*l);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>我们发现只需要会线段树的基本操作，并不需要维护两个标记,代码还简短,思路又简单 <del>(只是跑得没树状数组快</del><br>有了这个思想你就可以<strong>用两颗树状数组维护区间修改$+$区间查询了</strong><br>赶快动手吧，这儿有一道用到这个思想的<a href="https://www.luogu.org/problemnew/show/P4868" target="_blank" rel="noopener">例题</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4641 【[BJWC2008]序列】</title>
      <link href="/2019/06/19/P4641/"/>
      <url>/2019/06/19/P4641/</url>
      
        <content type="html"><![CDATA[<p>极其玄学的题目,好像没几个人通过,那我就讲下我的思路吧,看了下通过的巨佬的$Code$,好像没人和我一样,以下为毒瘤做法,<del>好孩子不要学习</del></p><h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><p>首先,一个数二进制第$i$为$1$的话,那么它肯定大于$2^{i}$,那它有没有上界呢,<del>好像没有</del>,不用怕,没有上界我们也要创造上界,我们把它模上$2^{i+1}$，那它不就有上界了嘛,所以分别$mod$ $2$,$4$,$8$…<br>我们可以建$16$颗权值线段树或平衡树查找区间$[2^{i},2^{i+1})$中数的个数  </p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>关键这题还有个修改操作,<br>因为$a+x$属于$[2^{i},2^{i+1})$,所以$a$属于$[2^{i}-x,2^{i+1}-x)$,<br>可还是有取模呢? </p><p>我们大胆猜测$a$属于$[2^{i}-x(mod$ $2^{i+1}),2^{i+1}-x(mod$ $2^{i+1}))$<br><del>大家自己手玩一下也能推得出来</del>，$OI$<del>界不需要证明</del>  </p><p>可左边界还有可能是负的呢?<br><del>没关系，继续大胆猜测</del><br>令$l=2^{i}-x(mod$ $2^{i+1})$,$r=2^{i+1}-x(mod$ $2^{i+1})-1$,$nr=2^{i+1}-1$<br>那此时$a$应属于$[0,r]$并上$[nr+l+1,nr]$<br>如果不懂的话就把它想象成一个环吧</p><p><strong>关键还是分析，代码相信大家都能写出了，这种分析比较不容易的懂,建议大家自己去推，去手算</strong><br>毒瘤$Code$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">namespace</span> IO &#123;<br><br>    <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>    <span class="hljs-function">T <span class="hljs-title">read</span><span class="hljs-params">(T&amp; a)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> c;<br>        <span class="hljs-keyword">while</span>((a=getchar()-<span class="hljs-string">'0'</span>)) <span class="hljs-keyword">if</span>(a&gt;<span class="hljs-number">0</span>&amp;&amp;a&lt;=<span class="hljs-number">9</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">while</span>((c=getchar())) &#123;<br>            <span class="hljs-keyword">if</span>(c&lt;<span class="hljs-string">'0'</span>||c&gt;<span class="hljs-string">'9'</span>) <span class="hljs-keyword">return</span> a;<br>            a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">'0'</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> a;<br>     &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">int</span> c; <span class="hljs-keyword">while</span>((c=getchar())) <span class="hljs-keyword">if</span>(c==<span class="hljs-string">'A'</span>||c==<span class="hljs-string">'Q'</span>) <span class="hljs-keyword">return</span> c; &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SegmentTree</span> &#123;</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">18</span>;<br>    <span class="hljs-keyword">int</span> s[maxn],lc[maxn],rc[maxn];<br>    <span class="hljs-keyword">int</span> size;<br><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> root[<span class="hljs-number">20</span>];<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o,<span class="hljs-keyword">int</span> L,<span class="hljs-keyword">int</span> R)</span> </span>&#123;<br>        s[o]=lc[o]=rc[o]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(L==R) <span class="hljs-keyword">return</span> ;<br>        <span class="hljs-keyword">int</span> mid=(L+R)&gt;&gt;<span class="hljs-number">1</span>;<br>        rc[o]=(lc[o]=size)+<span class="hljs-number">1</span>,size+=<span class="hljs-number">2</span>;<br>        build(lc[o],L,mid);<br>        build(rc[o],mid+<span class="hljs-number">1</span>,R);<br>    &#125;<br><br>    SegmentTree() &#123;<br>        size=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">15</span>;++i)<br>            build(root[i]=size++,<span class="hljs-number">0</span>,(<span class="hljs-number">1</span>&lt;&lt;(i+<span class="hljs-number">1</span>))<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o,<span class="hljs-keyword">int</span> L,<span class="hljs-keyword">int</span> R,<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(L==R) s[o]++;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> mid=(L+R)&gt;&gt;<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(x&lt;=mid) insert(lc[o],L,mid,x);<br>            <span class="hljs-keyword">else</span> insert(rc[o],mid+<span class="hljs-number">1</span>,R,x);<br>            s[o]=s[lc[o]]+s[rc[o]];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> o,<span class="hljs-keyword">int</span> L,<span class="hljs-keyword">int</span> R,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(l&lt;=L&amp;&amp;r&gt;=R) <span class="hljs-keyword">return</span> s[o];<br>        <span class="hljs-keyword">int</span> mid=(L+R)&gt;&gt;<span class="hljs-number">1</span>,res=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(l&lt;=mid) res=query(lc[o],L,mid,l,r);<br>        <span class="hljs-keyword">if</span>(r&gt;mid) res+=query(rc[o],mid+<span class="hljs-number">1</span>,R,l,r);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><span class="hljs-comment">/*<br>    void Debug(int o,int L,int R)&#123;<br>        printf("L %d R %d s %d\n",L,R,s[o]);<br>        if(L==R) return ;<br>        int mid=(L+R)&gt;&gt;1;<br>        Debug(lc[o],L,mid);<br>        Debug(rc[o],mid+1,R);<br>    &#125;<br>*/</span><br>&#125;t;<br><span class="hljs-keyword">int</span> n,m,a;<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> IO;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Mod(x,i) ((x)%(1&lt;&lt;(i)))</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x;<br>    read(n); read(m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i) &#123;<br>        read(x);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">15</span>;++j) &#123;<br>            <span class="hljs-keyword">int</span> k=Mod(x,j+<span class="hljs-number">1</span>);<br>            t.insert(t.root[j],<span class="hljs-number">0</span>,(<span class="hljs-number">1</span>&lt;&lt;(j+<span class="hljs-number">1</span>))<span class="hljs-number">-1</span>,k);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(m--) &#123;<br>        <span class="hljs-keyword">if</span>(get()==<span class="hljs-string">'A'</span>) read(x),a+=x,a=Mod(a,<span class="hljs-number">16</span>);<br>        <span class="hljs-keyword">else</span> &#123;<br>            read(x);<br>            <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">16</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">int</span> k=Mod(a,x+<span class="hljs-number">1</span>),l=(<span class="hljs-number">1</span>&lt;&lt;x)-k,r=(<span class="hljs-number">1</span>&lt;&lt;(x+<span class="hljs-number">1</span>))-k<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">if</span>(l&lt;<span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">int</span> nr=(<span class="hljs-number">1</span>&lt;&lt;(x+<span class="hljs-number">1</span>))<span class="hljs-number">-1</span>;<br>                ans+=t.query(t.root[x],<span class="hljs-number">0</span>,nr,nr+l+<span class="hljs-number">1</span>,nr);<br>                l=<span class="hljs-number">0</span>;<br>            &#125;<br>            ans+=t.query(t.root[x],<span class="hljs-number">0</span>,(<span class="hljs-number">1</span>&lt;&lt;(x+<span class="hljs-number">1</span>))<span class="hljs-number">-1</span>,l,r);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> !<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 P4042 【[AHOI2014/JSOI2014]骑士游戏】</title>
      <link href="/2019/06/18/P4042/"/>
      <url>/2019/06/18/P4042/</url>
      
        <content type="html"><![CDATA[<p>首先从$DP$角度分析这题, 用$d[i]$表示杀死怪物$i$所需的最低花费,<br><a id="more"></a><br> $k[i]$为膜法杀死$i$所需的花费, $s[i]$为站撸所需的花费, $e[i][j]$为撸死怪物$i$后产生的第$j$个怪物, 那么我们有状态转移方程<br>$d[i]=min(k[i],s[i]+\displaystyle \sum^{R[i]}_{j=1}{d[e[i][j]]})$<br>但是这样做有一个明显的$Bug$，万一撸死的怪物又能直接(或间接)产生它自身，递归就会陷入死循环，也就是有环，无法用$DP$解决<br>于是你<del>不小心</del>地点开了算法标签，满脸懵逼的你看见了$SPFA$, 于是尝试开始建模，可怎么也想不到该怎么连边，该怎么跑最短路<br><del>好吧，这其实是我的经历</del></p><h3 id="正言"><a href="#正言" class="headerlink" title="正言"></a>正言</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">(SPFA)多见于最大(小)问题中,在求解是会发现存在环,其模型是带环的图.其特点是节点间没有相互依赖关系,而且其最优值的传递不会产生后效性,大都满足最原始的三角不等式.因此我们可以使用类似的最短路的方法通过较优解之间的相互比较,相互跟新来得出全部节点的最优解<br>                                   --&lt;&lt;一本通&gt;&gt;<br></code></pre></td></tr></table></figure><p>好了,相信有了这句话,聪明的你就一定可以解决$Ta$了 </p><hr><p><strong>当我们更新$i$时,我们也应该将撸死后能产生$i$的怪物塞入队列中进行更新,因为其父节点可能会受影响被更新，所以应该反向建边，如此迭代后，就能得到最优解</strong><br>不懂的话详见$code$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">200000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1000000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span> &#123;</span><br>    <span class="hljs-keyword">int</span> v,next;<br>&#125;e[maxm],fe[maxm];<br><span class="hljs-comment">//f前缀代表反向边相关</span><br><br><span class="hljs-keyword">int</span> head[maxn],fhead[maxn];<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> d[maxn],s[maxn];<br><span class="hljs-keyword">bool</span> inp[maxn];<br><span class="hljs-keyword">int</span> en,fen;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>    e[++en].next=head[u];<br>    e[en].v=v; head[u]=en;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fadd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>    fe[++fen].next=fhead[u];<br>    fe[fen].v=v; fhead[u]=fen;<br>&#125;<br><br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt;q;<br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">SPFA</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) q.push(i);<br>    <span class="hljs-comment">//先全部塞入队列,初始值为膜法费用</span><br>    <span class="hljs-comment">//通过比较得到较优解,直至最优解</span><br>    <span class="hljs-keyword">while</span>(!q.empty()) &#123;<br>        <span class="hljs-keyword">int</span> u=q.front(); q.pop();<br>        inp[u]=<span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> res=s[u];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=head[u];i;i=e[i].next)<br>            res+=d[e[i].v];<br>        <span class="hljs-keyword">if</span>(res&lt;d[u]) &#123;<br>        <span class="hljs-comment">//比较子节点与自身的费用</span><br>            d[u]=res;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=fhead[u];i;i=fe[i].next) <span class="hljs-keyword">if</span>(inp[fe[i].v]) &#123;<br>            <span class="hljs-comment">//将其父节点塞入队列再更新</span><br>                q.push(fe[i].v); inp[fe[i].v]=<span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> d[<span class="hljs-number">1</span>];<br>    <span class="hljs-comment">//d[i]就表示完全杀死一只i的最低费用</span><br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> c; a=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>((a=getchar()-<span class="hljs-string">'0'</span>)) <span class="hljs-keyword">if</span>(a&gt;=<span class="hljs-number">0</span>&amp;&amp;a&lt;=<span class="hljs-number">9</span>) <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">while</span>((c=getchar())) &#123;<br>        <span class="hljs-keyword">if</span>(c&lt;<span class="hljs-string">'0'</span>||c&gt;<span class="hljs-string">'9'</span>) <span class="hljs-keyword">break</span>;<br>        a=(a&lt;&lt;<span class="hljs-number">3</span>)+(a&lt;&lt;<span class="hljs-number">1</span>)+c-<span class="hljs-string">'0'</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> r,v;<br>    read(n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) &#123;<br>        read(s[i]); read(d[i]); read(r);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;r;j++) &#123;<br>            read(v); add(i,v); fadd(v,i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,SPFA());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SPFA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 P2286 【[HNOI2004]宠物收养场】</title>
      <link href="/2019/06/18/P2286/"/>
      <url>/2019/06/18/P2286/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P2286" target="_blank" rel="noopener">[HNOI2004]宠物收养场</a>这题就是平衡树的板子<br>但是仍有一些小坑<br>发出来来让大家注意一下<br><a id="more"></a></p><h3 id="首先是题意-可能我语文不好-理解错了"><a href="#首先是题意-可能我语文不好-理解错了" class="headerlink" title="首先是题意(可能我语文不好,理解错了):"></a>首先是题意(可能我语文不好,理解错了):</h3><p>我本以为<code>宠物和人总是在一个时间段</code><br>指人与宠物之间要找到最优的方案以减少最终答案(那就很恶心了)<br>但事实上就是单纯的模拟<br>对人来说,如果还剩宠物就按照题意找出最佳的宠物并删除,否则就将人塞到另一颗树中<br>对宠物来说也是如此</p><h2 id="也就是我们要有两颗树"><a href="#也就是我们要有两颗树" class="headerlink" title="也就是我们要有两颗树:"></a>也就是我们要有两颗树:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">当有人来领宠物的时候<br>    如果宠物没了，就把人存起来； <br>    否则就去找个满足要求的宠物让他领回去。<br>当有宠物加入的时候，同理<br></code></pre></td></tr></table></figure><p>看到有$Dalao$用技巧的,也有说写两颗树的,但我们完全可以利用$C++$写个类封装起来</p><p>$Class$如下(这只是要了解类怎么写就好了,$Treap$还是$Splay$看个人喜好,不会平衡树我也就很无奈了,<del>不要再吐槽指针和码风了</del>)<br>注释应该很清晰了<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Treap</span> &#123;</span><br>  <span class="hljs-keyword">private</span>:<br>  <span class="hljs-comment">//private修饰的话,只能再结构体内部访问</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">80000</span>;<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">30</span>;   <span class="hljs-comment">//静态成员变量,一个属于结构体的变量</span><br>  <span class="hljs-keyword">int</span> size;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> v,r,s;<br>    Node *ch[<span class="hljs-number">2</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;  <span class="hljs-comment">//通过比较函数可以很好的改变树的优先级</span><br>      <span class="hljs-keyword">if</span>(x==v) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>      <span class="hljs-keyword">return</span> x&gt;v;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ch_size</span><span class="hljs-params">(<span class="hljs-keyword">int</span> d)</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> (ch[d]==<span class="hljs-literal">NULL</span>)?<span class="hljs-number">0</span>:ch[d]-&gt;s;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">maintain</span><span class="hljs-params">()</span> </span>&#123;<br>      s=<span class="hljs-number">1</span>+ch_size(<span class="hljs-number">0</span>)+ch_size(<span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;node[maxn];<br>  Node *root;<br>  <span class="hljs-comment">//树根,初始话时为空</span><br>  <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(Node* &amp;o,<span class="hljs-keyword">int</span> d)</span> </span>&#123;<br>    Node *k=o-&gt;ch[d^<span class="hljs-number">1</span>]; o-&gt;ch[d^<span class="hljs-number">1</span>]=k-&gt;ch[d]; k-&gt;ch[d]=o;<br>    o-&gt;maintain(); k-&gt;maintain(); o=k;<br>   &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert_node</span><span class="hljs-params">(Node* &amp;o,<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(o==<span class="hljs-literal">NULL</span>) &#123;<br>      o=&amp;node[size++];<br>      o-&gt;v=x; o-&gt;r=rand();<br>      o-&gt;s=<span class="hljs-number">1</span>;<br>      o-&gt;ch[<span class="hljs-number">0</span>]=o-&gt;ch[<span class="hljs-number">1</span>]=<span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">int</span> d=o-&gt;cmp(x);<br>      insert_node(o-&gt;ch[d],x); o-&gt;maintain();<br>      <span class="hljs-keyword">if</span>(o-&gt;ch[d]-&gt;r &gt; o-&gt;r) rotate(o,d^<span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">remove_node</span><span class="hljs-params">(Node* &amp;o,<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(o==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">int</span> d=o-&gt;cmp(x);<br>    <span class="hljs-keyword">if</span>(d==<span class="hljs-number">-1</span>) &#123;<br>      <span class="hljs-keyword">if</span>(o-&gt;ch[<span class="hljs-number">0</span>]==<span class="hljs-literal">NULL</span>) o=o-&gt;ch[<span class="hljs-number">1</span>];<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(o-&gt;ch[<span class="hljs-number">1</span>]==<span class="hljs-literal">NULL</span>) o=o-&gt;ch[<span class="hljs-number">0</span>];<br>      <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">int</span> d2=(o-&gt;ch[<span class="hljs-number">0</span>]-&gt;r &gt; o-&gt;ch[<span class="hljs-number">1</span>]-&gt;r);<br>    rotate(o,d2); remove_node(o-&gt;ch[d2],x);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> remove_node(o-&gt;ch[d],x);<br>    <span class="hljs-keyword">if</span>(o!=<span class="hljs-literal">NULL</span>) o-&gt;maintain();<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_last</span><span class="hljs-params">(Node* o,<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> last=-INF;     <span class="hljs-comment">//没有前驱时返回一个极小值</span><br>    <span class="hljs-keyword">while</span>(o!=<span class="hljs-literal">NULL</span>) &#123;<br>      <span class="hljs-keyword">if</span>(o-&gt;v &lt; x) last=o-&gt;v,o=o-&gt;ch[<span class="hljs-number">1</span>];  <span class="hljs-comment">//题面没说人和宠物的特点值不会相同,如果允许相同的话应改成 "&lt;=",但玄学AC</span><br>      <span class="hljs-keyword">else</span> o=o-&gt;ch[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> last;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_next</span><span class="hljs-params">(Node* o,<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> next=INF;<br>    <span class="hljs-keyword">while</span>(o!=<span class="hljs-literal">NULL</span>) &#123;<br>      <span class="hljs-keyword">if</span>(o-&gt;v &gt; x) next=o-&gt;v,o=o-&gt;ch[<span class="hljs-number">0</span>];<br>      <span class="hljs-keyword">else</span> o=o-&gt;ch[<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> next;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span>:  <span class="hljs-comment">//允许在结构体外访问</span><br>  Treap() &#123; root=<span class="hljs-literal">NULL</span>; size=<span class="hljs-number">0</span>; &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> root==<span class="hljs-literal">NULL</span>; &#125;<br>  <span class="hljs-comment">//包皮封装</span><br>  <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    insert_node(root,x);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    remove_node(root,x);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">last</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> get_last(root,x);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">next</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> get_next(root,x);<br>  &#125;<br>&#125;treap[<span class="hljs-number">2</span>];<br></code></pre></td></tr></table></figure></p><hr><h2 id="然后是主程序"><a href="#然后是主程序" class="headerlink" title="然后是主程序"></a>然后是主程序</h2><p>了解题意后我们发现人和宠物没有区别 <del>(出题人的想法?)</del><br>就可以利用取反运算一致对待了<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;ctime&gt;</span></span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1000000</span>;<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans=<span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> c,f=<span class="hljs-number">1</span>;  a=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>((c=getchar()))  &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">'-'</span>) f=<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(c&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>) <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">do</span> &#123;<br>        a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">'0'</span>;<br>        c=getchar();<br>    &#125;<span class="hljs-keyword">while</span>(c&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>);<br>    a*=f;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> n,p,x;<br>  read(n);<br>  <span class="hljs-keyword">while</span>(n--) &#123;<br>    read(p); read(x);<br>    <span class="hljs-keyword">if</span>(treap[p^<span class="hljs-number">1</span>].empty()) treap[p].insert(x);、<br>    <span class="hljs-comment">//另一颗树为空,存起来</span><br>    <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">//找到符合题意的人(或宠物)并删去</span><br>      <span class="hljs-keyword">int</span> a=treap[p^<span class="hljs-number">1</span>].last(x),b=treap[p^<span class="hljs-number">1</span>].next(x);<br>      <span class="hljs-keyword">if</span>(x-a&lt;=b-x) &#123;<br>        ans=(ans+x-a)%mod;<br>        treap[p^<span class="hljs-number">1</span>].remove(a);<br>      &#125;<br>      <span class="hljs-keyword">else</span> &#123;<br>        ans=(ans+b-x)%mod;<br>        treap[p^<span class="hljs-number">1</span>].remove(b);<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>写起来真的很方便,大家为什么不喜欢指针呢 $QAQ$</p>]]></content>
      
      
      
        <tags>
            
            <tag> BST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 P4879 【ycz的妹子】</title>
      <link href="/2019/06/18/P4879/"/>
      <url>/2019/06/18/P4879/</url>
      
        <content type="html"><![CDATA[<p>当我去年啥都不会的时候做了这道题,然后爆零了<br>如今想了起来,作文以记之  </p><h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><p>对于$C$和$I$操作,我们直接修改原数组,复杂度为$O(1)$，对于$Query$，因为只查询总颜值 <del>(由于颜值守恒定律)</del> ，我们只需要用$sum$来维护：  </p><p>$C$操作时$a[x]-=y,sum-=y$<br>$I$操作时$sum+=y-a[x],a[x]=y$</p><p>那最麻烦的$D$操作呢?<br>难道爆查?  </p><p>我们记$c[i]$表示$i$前面有的女友数，那$c[i]$肯定递增，所以再<strong>二分查找</strong>了,有因为女友数会改变,所以再用树状数组维护了,单次复杂度为$O((logn)^2)$，虽然总复杂度为$O(n(longn)^2)$,但因为常数小,成功得到了<a href="https://www.luogu.org/recordnew/show/19603774" target="_blank" rel="noopener">你谷第二</a>的成绩(2019.06.03)</p><p>$Code$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//luogu-judger-enable-o2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">500000</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">int</span> n,m;<br>ll sum;<br>ll a[maxn];<br><span class="hljs-keyword">int</span> c[maxn];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x&amp;-x; &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span>(x&lt;=maxn) c[x]+=y,x+=lowbit(x);<br>&#125;<br><span class="hljs-comment">//因为后来的妹子城市编号可能会大于n,所以要"x&lt;=maxn"</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(x) res+=c[x],x-=lowbit(x);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> T <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> c,f=<span class="hljs-number">1</span>;  a=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>((c=getchar()))  &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">'-'</span>) f=<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(c&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>) <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">do</span> &#123;<br>        a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">'0'</span>;<br>        c=getchar();<br>    &#125;<span class="hljs-keyword">while</span>(c&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>);<br>    <span class="hljs-keyword">return</span> a*=f;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">int</span> c; <span class="hljs-keyword">while</span>((c=getchar())) <span class="hljs-keyword">if</span>(c&gt;<span class="hljs-string">'A'</span>&amp;&amp;c&lt;<span class="hljs-string">'Z'</span>) <span class="hljs-keyword">return</span> c; &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> l=<span class="hljs-number">1</span>,r=maxn,mid;<br>    <span class="hljs-keyword">while</span>(l&lt;r) &#123;<br>        mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(ask(mid)&gt;=x) r=mid;<br>        <span class="hljs-keyword">else</span> l=mid+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">//二分查找</span><br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ll x,y;<br>    read(n); read(m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i) &#123;<br>        read(a[i]),sum+=a[i];<br>        add(i,<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//表示i城市有妹子</span><br>    &#125;<br>    <span class="hljs-keyword">while</span>(m--) &#123;<br>        <span class="hljs-keyword">char</span> cmd=get();<br>        <span class="hljs-keyword">if</span>(cmd==<span class="hljs-string">'Q'</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,sum);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cmd==<span class="hljs-string">'C'</span>)<br>            read(x),read(y),a[x]-=y,sum-=y;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cmd==<span class="hljs-string">'I'</span>) &#123;<br>            read(x),read(y),<br>            sum+=y-a[x],a[x]=y;<br>            <span class="hljs-keyword">if</span>(ask(x)==ask(x<span class="hljs-number">-1</span>)) add(x,<span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//ask(x)-ask(x-1)=0表示,x城市没有妹子</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            read(x),y=query(x),<br>            sum-=a[y],a[y]=<span class="hljs-number">0</span>;<br>            add(y,<span class="hljs-number">-1</span>);<br>            <span class="hljs-comment">//妹子走了 QWQ</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>注:</strong><br><strong>1.初始时妹子颜值不为负不代表后来的妹子颜值不为负</strong><br><strong>2.妹子城市居住范围为 $1$ ~ $5*10^5$, 而$n$为 $1 $ ~ $10^5$</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Splay</title>
      <link href="/2019/06/18/Splay/"/>
      <url>/2019/06/18/Splay/</url>
      
        <content type="html"><![CDATA[<h1 id="初号机"><a href="#初号机" class="headerlink" title="初号机"></a>初号机</h1><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function">T <span class="hljs-title">read</span><span class="hljs-params">(T&amp; a)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> c;<br>    <span class="hljs-keyword">while</span>((a=getchar()-<span class="hljs-string">'0'</span>)) <span class="hljs-keyword">if</span>(a&gt;<span class="hljs-number">0</span>&amp;&amp;a&lt;=<span class="hljs-number">9</span>) <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">while</span>((c=getchar())) &#123;<br>        <span class="hljs-keyword">if</span>(c&lt;<span class="hljs-string">'0'</span>||c&gt;<span class="hljs-string">'9'</span>) <span class="hljs-keyword">return</span> a;<br>        a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">'0'</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">100000</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF =<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> v,s,filp;<br>    Node* ch[<span class="hljs-number">2</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ch_size</span><span class="hljs-params">(<span class="hljs-keyword">int</span> d)</span> </span>&#123; <span class="hljs-keyword">return</span> ch[d]?ch[d]-&gt;s:<span class="hljs-number">0</span>; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">maintain</span><span class="hljs-params">()</span> </span>&#123; s=<span class="hljs-number">1</span>+ch_size(<span class="hljs-number">0</span>)+ch_size(<span class="hljs-number">1</span>); &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push_down</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!filp) <span class="hljs-keyword">return</span> ;<br>        swap(ch[<span class="hljs-number">0</span>],ch[<span class="hljs-number">1</span>]); filp=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(ch[<span class="hljs-number">0</span>]) ch[<span class="hljs-number">0</span>]-&gt;filp^=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(ch[<span class="hljs-number">1</span>]) ch[<span class="hljs-number">1</span>]-&gt;filp^=<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(ch_size(<span class="hljs-number">0</span>)+<span class="hljs-number">1</span>==k) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">return</span> ch_size(<span class="hljs-number">0</span>)+<span class="hljs-number">1</span>&lt;k;<br>    &#125;<br><br>&#125;node[maxn];<br><span class="hljs-keyword">int</span> size;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">creat</span><span class="hljs-params">(Node* &amp;o,<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    o=&amp;node[++size]; o-&gt;v=x;<br>    o-&gt;s=<span class="hljs-number">1</span>; o-&gt;filp=<span class="hljs-number">0</span>;<br>    o-&gt;ch[<span class="hljs-number">0</span>]=o-&gt;ch[<span class="hljs-number">1</span>]=<span class="hljs-literal">NULL</span>;<br>&#125;<br><br>Node* _build(Node* &amp;o,<span class="hljs-keyword">int</span> L,<span class="hljs-keyword">int</span> R,<span class="hljs-keyword">int</span>* a) &#123;<br>    <span class="hljs-keyword">if</span>(L&gt;R) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">int</span> mid=(L+R)&gt;&gt;<span class="hljs-number">1</span>;<br>    creat(o,a[mid]);<br>    _build(o-&gt;ch[<span class="hljs-number">0</span>],L,mid<span class="hljs-number">-1</span>,a);<br>    _build(o-&gt;ch[<span class="hljs-number">1</span>],mid+<span class="hljs-number">1</span>,R,a);<br>    o-&gt;maintain();<br>    <span class="hljs-keyword">return</span> o;<br>&#125;<br><br><span class="hljs-function">Node* <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* a,<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    Node* root=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> _build(root,<span class="hljs-number">1</span>,n,a);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(Node* &amp;o,<span class="hljs-keyword">int</span> d)</span> </span>&#123;<br>    Node* k=o-&gt;ch[d^<span class="hljs-number">1</span>]; o-&gt;ch[d^<span class="hljs-number">1</span>]=k-&gt;ch[d],k-&gt;ch[d]=o;<br>    o-&gt;maintain(); k-&gt;maintain(); o=k;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(Node* &amp;o,<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(o==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> creat(o,x);<br>    insert(o-&gt;ch[o-&gt;v &lt; x],x);<br>    o-&gt;maintain();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">splay</span><span class="hljs-params">(Node* &amp;o,<span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    o-&gt;push_down();<br>    <span class="hljs-keyword">int</span> d=o-&gt;cmp(k);<br>    <span class="hljs-keyword">if</span>(d==<span class="hljs-number">1</span>) k-=o-&gt;ch_size(<span class="hljs-number">0</span>)+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(d!=<span class="hljs-number">-1</span>) &#123;<br>        Node* p=o-&gt;ch[d];<br>        p-&gt;push_down();<br>        <span class="hljs-keyword">int</span> d2=p-&gt;cmp(k),k2=k-(d2?(p-&gt;ch_size(<span class="hljs-number">0</span>)+<span class="hljs-number">1</span>):<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(d2!=<span class="hljs-number">-1</span>) &#123;<br>            splay(p-&gt;ch[d2],k2);<br>            <span class="hljs-keyword">if</span>(d==d2) rotate(o,d^<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">else</span> rotate(o-&gt;ch[d],d);<br>        &#125;<br>        rotate(o,d^<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function">Node* <span class="hljs-title">merge</span><span class="hljs-params">(Node* left,Node* right)</span> </span>&#123;<br>    splay(left,left-&gt;s);<br>    left-&gt;ch[<span class="hljs-number">1</span>]=right;<br>    left-&gt;maintain();<br>    <span class="hljs-keyword">return</span> left;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">split</span><span class="hljs-params">(Node* o,<span class="hljs-keyword">int</span> k,Node* &amp;left,Node* &amp;right)</span> </span>&#123;<br>    splay(o,k);<br>    left=o,right=o-&gt;ch[<span class="hljs-number">1</span>];<br>    o-&gt;ch[<span class="hljs-number">1</span>]=<span class="hljs-literal">NULL</span>;<br>    left-&gt;maintain();<br>&#125;<br><br><span class="hljs-keyword">bool</span> first=<span class="hljs-literal">false</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(Node* o)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(o==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> ;<br>    o-&gt;push_down();<br>    dfs(o-&gt;ch[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">if</span>(o-&gt;v!=INF) &#123;<br>        <span class="hljs-keyword">if</span>(!first) first=<span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">putchar</span>(<span class="hljs-string">' '</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,o-&gt;v);<br>    &#125;<br>    dfs(o-&gt;ch[<span class="hljs-number">1</span>]);<br>&#125;<br><br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">int</span> a[maxn];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> l,r;<br>    read(n); read(m);<br>    a[<span class="hljs-number">1</span>]=INF;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i) a[i+<span class="hljs-number">1</span>]=i;<br>    Node* root=build(a,n+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">while</span>(m--) &#123;<br>        read(l); read(r);<br>        Node *left,*right,*mid,*o;<br>        split(root,l,left,o);<br>        split(o,r-l+<span class="hljs-number">1</span>,mid,right);<br>        mid-&gt;filp^=<span class="hljs-number">1</span>;<br>        root=merge(merge(left,mid),right);<br>    &#125;<br>    dfs(root);<br>    <span class="hljs-keyword">return</span> !<span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> BST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Treap模板</title>
      <link href="/2019/06/18/P3369/"/>
      <url>/2019/06/18/P3369/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P3369" target="_blank" rel="noopener">普通平衡树</a><br>板子:<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;ctime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> v,r,s,c;<br>    node* ch[<span class="hljs-number">2</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(x==v) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">return</span> x&gt;v;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ch_size</span><span class="hljs-params">(<span class="hljs-keyword">int</span> d)</span> </span>&#123; <span class="hljs-keyword">return</span> (ch[d]==<span class="hljs-literal">NULL</span>)?<span class="hljs-number">0</span>:ch[d]-&gt;s; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">maintain</span><span class="hljs-params">()</span> </span>&#123;<br>        s=c+ch_size(<span class="hljs-number">0</span>)+ch_size(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;treap[<span class="hljs-number">100010</span>];<br><br><span class="hljs-keyword">int</span> en=<span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(node* &amp;o,<span class="hljs-keyword">int</span> d)</span> </span>&#123;<br>    node *k=o-&gt;ch[d^<span class="hljs-number">1</span>]; o-&gt;ch[d^<span class="hljs-number">1</span>]=k-&gt;ch[d]; k-&gt;ch[d]=o;<br>    o-&gt;maintain(); k-&gt;maintain(); o=k;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(node* &amp;o,<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(o==<span class="hljs-literal">NULL</span>) &#123;<br>        o=&amp;treap[en++];<br>        o-&gt;v=x; o-&gt;r=rand();<br>        o-&gt;s=o-&gt;c=<span class="hljs-number">1</span>;<br>        o-&gt;ch[<span class="hljs-number">0</span>]=o-&gt;ch[<span class="hljs-number">1</span>]=<span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">int</span> d=o-&gt;cmp(x);<br>        <span class="hljs-keyword">if</span>(d==<span class="hljs-number">-1</span>) &#123; o-&gt;s++; o-&gt;c++; <span class="hljs-keyword">return</span> ; &#125;<br>        insert(o-&gt;ch[d],x); o-&gt;maintain();<br>        <span class="hljs-keyword">if</span>(o-&gt;ch[d]-&gt;r &gt; o-&gt;r) rotate(o,d^<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(node* &amp;o,<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(o==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">int</span> d=o-&gt;cmp(x);<br>    <span class="hljs-keyword">if</span>(d==<span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">if</span>(o-&gt;c &gt; <span class="hljs-number">1</span>) &#123; o-&gt;s--; o-&gt;c--; <span class="hljs-keyword">return</span> ; &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(o-&gt;ch[<span class="hljs-number">0</span>]==<span class="hljs-literal">NULL</span>) o=o-&gt;ch[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(o-&gt;ch[<span class="hljs-number">1</span>]==<span class="hljs-literal">NULL</span>) o=o-&gt;ch[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> d2=(o-&gt;ch[<span class="hljs-number">0</span>]-&gt;r &gt; o-&gt;ch[<span class="hljs-number">1</span>]-&gt;r);<br>            rotate(o,d2); remove(o-&gt;ch[d2],x);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> remove(o-&gt;ch[d],x);<br>    <span class="hljs-keyword">if</span>(o!=<span class="hljs-literal">NULL</span>) o-&gt;maintain();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(node *o,<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span>(o!=<span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">int</span> d=o-&gt;cmp(x);<br>        <span class="hljs-keyword">if</span>(d==<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        o=o-&gt;ch[d];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rank</span><span class="hljs-params">(node *o,<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> rk=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(o!=<span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">int</span> d=o-&gt;cmp(x);<br>        <span class="hljs-keyword">if</span>(d==<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> rk+o-&gt;ch_size(<span class="hljs-number">0</span>)+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(d) rk+=o-&gt;ch_size(<span class="hljs-number">0</span>)+o-&gt;c;<br>        o=o-&gt;ch[d];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">kth</span><span class="hljs-params">(node* o,<span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span>(o!=<span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span>(o-&gt;ch_size(<span class="hljs-number">0</span>)&lt;k&amp;&amp;o-&gt;ch_size(<span class="hljs-number">0</span>)+o-&gt;c&gt;=k) <span class="hljs-keyword">return</span> o-&gt;v;<br>        <span class="hljs-keyword">if</span>(o-&gt;ch_size(<span class="hljs-number">0</span>)&gt;=k) o=o-&gt;ch[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">else</span> k-=o-&gt;ch_size(<span class="hljs-number">0</span>)+o-&gt;c,o=o-&gt;ch[<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_last</span><span class="hljs-params">(node* o,<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> last;<br>    <span class="hljs-keyword">while</span>(o!=<span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span>(o-&gt;v &lt; x) last=o-&gt;v,o=o-&gt;ch[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">else</span> o=o-&gt;ch[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> last;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_next</span><span class="hljs-params">(node* o,<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> next;<br>    <span class="hljs-keyword">while</span>(o!=<span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span>(o-&gt;v &gt; x) next=o-&gt;v,o=o-&gt;ch[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">else</span> o=o-&gt;ch[<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> next;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> c,f=<span class="hljs-number">1</span>;  a=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>((c=getchar()))  &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">'-'</span>) f=<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(c&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>) <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">do</span> &#123;<br>        a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">'0'</span>;<br>        c=getchar();<br>    &#125;<span class="hljs-keyword">while</span>(c&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>);<br>    a*=f;<br>&#125;<br><br><span class="hljs-keyword">int</span> s[<span class="hljs-number">20</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span><br></span>&#123;<br>    <span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">'-'</span>),x=~(x<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">int</span> top=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(x) s[++top]=x%<span class="hljs-number">10</span>,x/=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">if</span>(!top) s[++top]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(top) <span class="hljs-built_in">putchar</span>(s[top--]+<span class="hljs-string">'0'</span>);<br>    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    srand(time(<span class="hljs-literal">NULL</span>));<br>    node root; root.ch[<span class="hljs-number">0</span>]=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">int</span> n,x,y; read(n);<br>    <span class="hljs-keyword">while</span>(n--) &#123;<br>        read(x); read(y);<br>        <span class="hljs-keyword">if</span>(x==<span class="hljs-number">1</span>) insert(root.ch[<span class="hljs-number">0</span>],y);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x==<span class="hljs-number">2</span>) remove(root.ch[<span class="hljs-number">0</span>],y);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x==<span class="hljs-number">3</span>) write(rank(root.ch[<span class="hljs-number">0</span>],y));<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x==<span class="hljs-number">4</span>) write(kth(root.ch[<span class="hljs-number">0</span>],y));<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x==<span class="hljs-number">5</span>) write(get_last(root.ch[<span class="hljs-number">0</span>],y));<br>        <span class="hljs-keyword">else</span> write(get_next(root.ch[<span class="hljs-number">0</span>],y));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>注释以后再加<br><strong>emmmmm</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> BST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆序对</title>
      <link href="/2019/06/18/%E9%80%86%E5%BA%8F%E5%AF%B9/"/>
      <url>/2019/06/18/%E9%80%86%E5%BA%8F%E5%AF%B9/</url>
      
        <content type="html"><![CDATA[<p><strong><em><a href="https://www.luogu.org/problemnew/show/P1908" target="_blank" rel="noopener">原题</a></em></strong></p><h1 id="面对蒟蒻的逆序对"><a href="#面对蒟蒻的逆序对" class="headerlink" title="面对蒟蒻的逆序对"></a>面对<del>蒟蒻</del>的逆序对</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一看到题，我们脑海中的第一想法一定就是暴力,<br><a id="more"></a><br>对于每个数$a[i]$找出$j<i$,并且$a[j]>a[i]$,很简单的思路，两个for循环，时间复杂度$O(n^2)$</i$,并且$a[j]></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) &#123;<br>    read(a[i]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;i;j++)<br>        <span class="hljs-keyword">if</span>(a[j]&gt;a[i]) ans++;<br>&#125;<br></code></pre></td></tr></table></figure><p>但我相信没有人会在看到这样的数据规模还真会的码一遍暴力，更何况这都已经放在分治区了，在看到题解后我们就会成功学会了归并排序，又见识到了离散化+树状数组的骚操作</p><h4 id="（完）"><a href="#（完）" class="headerlink" title="（完）"></a>（完）</h4><hr><h2 id="正言"><a href="#正言" class="headerlink" title="正言"></a>正言</h2><p> 但这样就真的完了吗？作为一个善于思考的蒟蒻，我们不能被思维所定式，难道没有其他解决方案吗？</p><p>回到我们的思维起点: <strong>对于每个数$a[i]$找出$j<i$,并且$a[j]>a[i]$</i$,并且$a[j]></strong></p><p>这里的 <strong>找</strong> 如果用<code>for</code>循环实现，那么时间复杂度就是$O(n)$<br>有没有一种方法可以用更短的时间找出所以比$a[i]$小的数呢？<br>我们都知道在 <strong>有序序列</strong> 中，用二分可以在$O(logn)$的时间内找出比$a[i]$小的最大数的下标<code>x</code>,那么<code>x</code>便是对于当前所有关于$a[i]$的逆序对的个数，可是如果边排序边找，反而需要更多的时间了，我们假想有没有这样一种可以<strong>动态维护</strong>的有序序列  </p><p>至此，我们就可以引出今天的主角了:</p><h1 id="排序二叉树-Binary-Search-Tree"><a href="#排序二叉树-Binary-Search-Tree" class="headerlink" title="排序二叉树(Binary Search Tree)"></a>排序二叉树(Binary Search Tree)</h1><p>是不是听起很高大上，但是没关系，<strong>朴素的BST</strong>就像二分一样容易实现</p><h2 id="BST的性质"><a href="#BST的性质" class="headerlink" title="BST的性质"></a>BST的性质</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">任意结点的左子树中的元素都比右子树小<br>左，右子树仅为排序二叉树<br></code></pre></td></tr></table></figure><p>但我们即使知道有这样一种数据结构又有何用？<br>举个例子，现在就有一棵排序二叉树：<br><img src="https://i.loli.net/2019/03/10/5c83e9495cdaf.png" alt><br>假定我们有一个元素$5$,如何找比它大的元素的个数呢？<br>别急，我们先试试把$5$插入到这棵树中<br>首先$5$比$7$小，所以为了维护BST的性质，我们先把$5$放在$7$的左子树，再来，$5$比$4$大，所以我们再把$5$放到$4$的右子树中…   </p><p>最后，如果子树为空，就创立叶节点<br>那么插入$5$后的树应该是这样的:<br><img src="https://i.loli.net/2019/03/10/5c83ea2ab1ea9.png" alt>  </p><p>我们再手算一下$5$逆序对的个数：$4$<br>这和树又有什么关系吗？<br>显然，我们发现<strong>由于右子树一定比左子树大</strong>，所以当元素向左插入时，<strong>右子树及其父节点就一定比这个数大</strong>，那么<strong>右子树及其父节点数就是这一层的逆序对数</strong>，当节点插入完成时，也就可以找到所以的逆序对数了，<strong>特殊地，当父节点与插入元素相等时，应放在右子树</strong>(想一想为什么？)</p><p>例如：当$5$在插入第一层时，由于比$7$小，所以此时有$3$个逆序对，在统计节点数时我们不必遍历整棵右子树，只需附加一个<code>chr_node</code>来表示右子树及其根节点数，并进行维护</p><p>那么，基此，我们就有了一个大概的递归算法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">插入元素时,若它比父节点小,那么ans加该节点及其右子树的元素个数,并将其递归调用到左子树中;<br>否则维护该节点右子树的节点个数(即 chr_node++; ),并递归调用到右子树中<br>当节点的左(或右)子树为空时,插入节点,并将其指针(下标)保存到父节点中<br></code></pre></td></tr></table></figure></p><hr><p><strong>我们再用结构体保存节点：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span><br>&#123;</span><br>    <span class="hljs-keyword">int</span> ch[<span class="hljs-number">2</span>];        <span class="hljs-comment">//ch[0]和ch[1]分别代表左右子节点</span><br>    <span class="hljs-keyword">int</span> data,chr_node;<br>    node() &#123; ch[<span class="hljs-number">0</span>]=ch[<span class="hljs-number">1</span>]=<span class="hljs-number">-1</span>; chr_node=<span class="hljs-number">1</span>; &#125;<br>    <span class="hljs-comment">//chr_node代表该节点及其右子树元素个数,-1代表空指针</span><br>&#125;tree[<span class="hljs-number">500010</span>];<br></code></pre></td></tr></table></figure></p><hr><p>插入代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> d,<span class="hljs-keyword">int</span> ch=<span class="hljs-number">0</span>)</span> </span>&#123;              <span class="hljs-comment">//ch为节点指针</span><br>    <span class="hljs-keyword">if</span>(ch==<span class="hljs-number">-1</span>) &#123;<br>        tree[en].data=d;<br>        <span class="hljs-keyword">return</span> ch=en++;                   <span class="hljs-comment">//创造叶节点</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(d&lt;tree[ch].data) &#123;<br>        ans+=tree[ch].chr_node;           <span class="hljs-comment">//统计逆序对个数</span><br>        tree[ch].ch[<span class="hljs-number">0</span>]=insert(d,tree[ch].ch[<span class="hljs-number">0</span>]);  <span class="hljs-comment">//保存左儿子,虽然对某些节点做了无用功</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        tree[ch].chr_node++;              <span class="hljs-comment">//维护右子树节点个数</span><br>        tree[ch].ch[<span class="hljs-number">1</span>]=insert(d,tree[ch].ch[<span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ch;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>可以根据<strong>树的对称性</strong>进行压行(实在懒得改了<br>然后就大概能AC了，为什么说大概呢？<br>当构造出的树<strong>接近完全二叉树</strong>时,时间复杂度为O(nlogn),若数据<strong>几乎单调</strong>时,这时的树<strong>几乎是一条链</strong>,插入复杂度为O(n),总复杂度为O(n^2),但可以通过<strong>旋转</strong>构造<strong>平衡树</strong><br>但<del>由于数据比较水</del>，玄学地A了!!!(虽然跑的比归并慢了一倍</p><p><a href="https://www.luogu.org/recordnew/show/16816700" target="_blank" rel="noopener">2439m/s</a>  </p><p>另外，当遇到相同元素时，也可以<strong>提前结束递归以减少树的高度</strong>，降低查找与插入的时间，对策是在<code>void insert(int d, int ch =0)</code>中加入：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span>(d==tree[ch].data) &#123;<br>    <span class="hljs-keyword">int</span> t=tree[ch].ch[<span class="hljs-number">1</span>];<br>    ans+=(t==<span class="hljs-number">-1</span>)?<span class="hljs-number">0</span>:tree[t].chr_node; <br>    tree[ch].chr_node++; <br>&#125; <br>``` <br>(想一想为什么？)<br> <br> <br>## 后言(对我一样的蒟蒻及其不友好<br>如果用treap的话，常数和空间都比较大  <br>这里给出[**treap**](https:<span class="hljs-comment">//www.luogu.org/recordnew/show/17058950)的代码，感兴趣的OIer可以参照蓝书和洛谷日报,以及其他大佬的题解  </span><br>注释版：<br>```cpp<br>#include&lt;cstdio&gt;<br>#include&lt;cstdlib&gt;<br>#include&lt;ctime&gt;<br><br>struct node<br>&#123;<br>    <span class="hljs-keyword">int</span> v,r,s;<br>    node *ch[<span class="hljs-number">2</span>];<br>    node() &#123; ch[<span class="hljs-number">0</span>]=ch[<span class="hljs-number">1</span>]=<span class="hljs-literal">NULL</span>; s=<span class="hljs-number">1</span>; &#125;<br>    <span class="hljs-comment">//s为包括自身的左右子树的总节点数</span><br>    <span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> cmp(<span class="hljs-keyword">int</span> x) &#123;<br>        <span class="hljs-keyword">if</span>(x==v) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">return</span> x&gt;v;<br>    &#125;<br>    <span class="hljs-comment">//用函数计算出方向，-1的话就表示重复了，不插入了</span><br>    <span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> ch_node(<span class="hljs-keyword">int</span> d) &#123;<br>        <span class="hljs-keyword">return</span> (ch[d]==<span class="hljs-literal">NULL</span>)?<span class="hljs-number">0</span>:ch[d]-&gt;s;<br>    &#125;<br>    <span class="hljs-comment">//即不包括父节点的左/右(0/1)子树节点数</span><br>&#125;treap[<span class="hljs-number">500010</span>];<br><br><span class="hljs-keyword">int</span> en=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans=<span class="hljs-number">0</span>;<br><br><br><span class="hljs-comment">//0代表左旋,1代表右右旋，参照蓝书</span><br><span class="hljs-keyword">void</span> rotate(node* &amp;o,<span class="hljs-keyword">int</span> d) &#123;<br>    node *k=o-&gt;ch[d^<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">int</span> o1=o-&gt;s - o-&gt;ch_node(d^<span class="hljs-number">1</span>),k1=k-&gt;s - k-&gt;ch_node(d);<br>    <span class="hljs-comment">//这一步可以自己画草图了解一下,利用了对称性压行,维护子节点数，自己想一想</span><br>    o-&gt;ch[d^<span class="hljs-number">1</span>]=k-&gt;ch[d];<br>    k-&gt;ch[d]=o;<br>    k-&gt;s+=o1; o-&gt;s-=k1;<br>    o=k;<br>&#125;<br><br><br><span class="hljs-keyword">void</span> insert(node* &amp;o,<span class="hljs-keyword">int</span> x) &#123;<br>    <span class="hljs-keyword">if</span>(o==<span class="hljs-literal">NULL</span>) &#123; o=&amp;(treap[en++]); o-&gt;v=x; o-&gt;r=rand(); &#125;<br>    <span class="hljs-comment">//插入节点,利用随机化并维护堆的性质,确保树的高度不会太高</span><br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">int</span> d=o-&gt;cmp(x);<br>        <span class="hljs-keyword">if</span>(d==<span class="hljs-number">-1</span>) &#123; ans+=o-&gt;ch_node(<span class="hljs-number">1</span>); o-&gt;s++; <span class="hljs-keyword">return</span>; &#125;<span class="hljs-comment">//利用了上面的结论</span><br>        <span class="hljs-keyword">if</span>(!d) ans+=o-&gt;s - o-&gt;ch_node(<span class="hljs-number">0</span>);   <span class="hljs-comment">//右子树及其根节点=总结点个数-左节点个数!=o-&gt;ch_node(1)+1，想一想为什么？</span><br>        insert(o-&gt;ch[d],x);<br>        o-&gt;s++;<br>        <span class="hljs-keyword">if</span>(o-&gt;ch[d]-&gt;r &gt; o-&gt;r) rotate(o,d^<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//先插入，再维护节点数以及树的平衡</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">int</span> read(<span class="hljs-keyword">int</span> &amp;a) &#123;<br>    <span class="hljs-keyword">int</span> c,f=<span class="hljs-number">1</span>;  a=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>((c=getchar()))  &#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">'-'</span>) f=<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(c&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>) <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">do</span> &#123;<br>        a=a*<span class="hljs-number">10</span>+c-<span class="hljs-string">'0'</span>;<br>        c=getchar();<br>    &#125;<span class="hljs-keyword">while</span>(c&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>);<br>    <span class="hljs-keyword">return</span> a*=f;<br>&#125;<br><br><span class="hljs-keyword">int</span> main() &#123;<br>    <span class="hljs-keyword">int</span> n,x;<br>    node root;  <span class="hljs-comment">//虚拟根节点,防止真正根节点因旋转改变而丢失，避免了手动插入根节点</span><br>    read(n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) insert(root.ch[<span class="hljs-number">0</span>],read(x));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>&amp;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure></p><p>给一张草图体会旋转时节点数的变换吧 <del>(笑哭</del>  </p><h2 id="草图"><a href="#草图" class="headerlink" title="草图 "></a><a href="https://i.loli.net/2019/03/10/5c83f93931a5b.png" target="_blank" rel="noopener"><strong>草图</strong></a> </h2><p><del>看在我这么认真的份上求通过吧<strong>QWQ</strong></del></p>]]></content>
      
      
      
        <tags>
            
            <tag> BST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 P5338 【[TJOI2019]甲苯先生的滚榜】</title>
      <link href="/2019/06/18/P5338/"/>
      <url>/2019/06/18/P5338/</url>
      
        <content type="html"><![CDATA[<p>平衡树板子题<br>不用担心 暴力删点 加点 开$O2$能过<br><a id="more"></a><br>反正省选能开 <del>为什么$NOIP$没有</del></p><h3 id="First"><a href="#First" class="headerlink" title="First"></a>First</h3><p>用一个结构体保存节点<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kkk</span> &#123;</span><br>    <span class="hljs-keyword">int</span> ac,rib;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> == (<span class="hljs-keyword">const</span> kkk&amp; res) <span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-keyword">return</span> ac==res.ac&amp;&amp;rib==res.rib;<br>    &#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> kkk&amp; res) <span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-keyword">return</span> ac&gt;res.ac||(ac==res.ac&amp;&amp;rib&lt;res.rib);<br>    &#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;= (<span class="hljs-keyword">const</span> kkk&amp; res) <span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>&lt;res||*<span class="hljs-keyword">this</span>==res; <br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></p><p><del>我也不知道为什么要用这个名字</del></p><h3 id="Second"><a href="#Second" class="headerlink" title="Second"></a>Second</h3><p>平衡树板子<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">略<br></code></pre></td></tr></table></figure></p><p>见以下代码</p><h2 id="Third-加点-删点"><a href="#Third-加点-删点" class="headerlink" title="Third 加点 删点"></a>Third 加点 删点</h2><p>用$AC[a]$表示$a$的题数,$RIB[b]$表示罚时<br>当$a$ $AC$了一题,罚时为$b$时<br>那我们删点{$AC[a]$,$RIB[a]$}<br>然后加点{$++AC[a]$,$RIB[a]+=b$} 并求排名就可以了   </p><p>完整$CODE$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// luogu-judger-enable-o2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;ctime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kkk</span> &#123;</span><br>    <span class="hljs-keyword">int</span> ac,rib;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> == (<span class="hljs-keyword">const</span> kkk&amp; res) <span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-keyword">return</span> ac==res.ac&amp;&amp;rib==res.rib;<br>    &#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> kkk&amp; res) <span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-keyword">return</span> ac&gt;res.ac||(ac==res.ac&amp;&amp;rib&lt;res.rib);<br>    &#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;= (<span class="hljs-keyword">const</span> kkk&amp; res) <span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>&lt;res||*<span class="hljs-keyword">this</span>==res; <br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">namespace</span> zl_just &#123;<br>    <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Treap</span> &#123;</span><br>        <span class="hljs-keyword">public</span>:<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1000000</span> + <span class="hljs-number">5</span>;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>            T v;<br>            <span class="hljs-keyword">int</span> c,s,r;<br>            Node *ch[<span class="hljs-number">2</span>];<br>            <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(T x)</span> </span>&#123;<br>                <span class="hljs-keyword">if</span>(x==v) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>                <span class="hljs-keyword">return</span> v&lt;x;<br>            &#125;<br>            <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ch_size</span><span class="hljs-params">(<span class="hljs-keyword">int</span> d)</span> </span>&#123; <span class="hljs-keyword">return</span> ch[d]==<span class="hljs-literal">NULL</span>?<span class="hljs-number">0</span>:ch[d]-&gt;s; &#125;<br>            <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">maintain</span><span class="hljs-params">()</span> </span>&#123; s=c+ch_size(<span class="hljs-number">0</span>)+ch_size(<span class="hljs-number">1</span>); &#125;<br>        &#125;node[maxn];<br>        Node* root;<br>        <span class="hljs-keyword">int</span> size;<br>        Treap() &#123; root=<span class="hljs-literal">NULL</span>; size=<span class="hljs-number">0</span>; &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123; root=<span class="hljs-literal">NULL</span>; size=<span class="hljs-number">0</span>; &#125;<br>        <br>        <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(Node* &amp;o,<span class="hljs-keyword">int</span> d)</span> </span>&#123;<br>            Node *k=o-&gt;ch[d^<span class="hljs-number">1</span>]; o-&gt;ch[d^<span class="hljs-number">1</span>]=k-&gt;ch[d]; k-&gt;ch[d]=o; <br>            o-&gt;maintain(); k-&gt;maintain(); o=k;<br>        &#125;<br>        <br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(Node* &amp;o,T x)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span>(o==<span class="hljs-literal">NULL</span>) &#123;<br>                o=&amp;node[size++]; o-&gt;r=rand();<br>                o-&gt;v=x; o-&gt;s=o-&gt;c=<span class="hljs-number">1</span>;<br>                o-&gt;ch[<span class="hljs-number">0</span>]=o-&gt;ch[<span class="hljs-number">1</span>]=<span class="hljs-literal">NULL</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">int</span> d=o-&gt;cmp(x);<br>                <span class="hljs-keyword">if</span>(d==<span class="hljs-number">-1</span>) &#123; o-&gt;c++; o-&gt;s++; <span class="hljs-keyword">return</span> ; &#125;<br>                insert(o-&gt;ch[d],x); o-&gt;maintain();<br>                <span class="hljs-keyword">if</span>(o-&gt;ch[d]-&gt;r &gt; o-&gt;r) rotate(o,d^<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(Node* &amp;o,T x)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span>(o==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> ;<br>            <span class="hljs-keyword">int</span> d=o-&gt;cmp(x);<br>            <span class="hljs-keyword">if</span>(d==<span class="hljs-number">-1</span>) &#123;<br>                <span class="hljs-keyword">if</span>(o-&gt;c &gt; <span class="hljs-number">1</span>) &#123; o-&gt;c--; o-&gt;s--; <span class="hljs-keyword">return</span> ; &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(o-&gt;ch[<span class="hljs-number">0</span>]==<span class="hljs-literal">NULL</span>) o=o-&gt;ch[<span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(o-&gt;ch[<span class="hljs-number">1</span>]==<span class="hljs-literal">NULL</span>) o=o-&gt;ch[<span class="hljs-number">0</span>];<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">int</span> d2 = (o-&gt;ch[<span class="hljs-number">0</span>]-&gt;r &gt; o-&gt;ch[<span class="hljs-number">1</span>]-&gt;r);<br>                    rotate(o,d2); remove(o-&gt;ch[d2],x);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> remove(o-&gt;ch[d],x);<br>            <span class="hljs-keyword">if</span>(o!=<span class="hljs-literal">NULL</span>) o-&gt;maintain();<br>        &#125;<br>        <br>        <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rank</span><span class="hljs-params">(Node *o,T x)</span> </span>&#123;<br>            <span class="hljs-keyword">int</span> rk=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(o!=<span class="hljs-literal">NULL</span>) &#123;<br>                <span class="hljs-keyword">int</span> d=o-&gt;cmp(x);<br>                <span class="hljs-keyword">if</span>(d==<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> rk+o-&gt;ch_size(<span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">if</span>(d) rk+=o-&gt;ch_size(<span class="hljs-number">0</span>)+o-&gt;c;<br>                o=o-&gt;ch[d];<br>            &#125;  <br>            <span class="hljs-keyword">return</span> rk;<br>        &#125;<br>    &#125;;<br>&#125;<br><span class="hljs-comment">//模板</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> zl_just;<br><span class="hljs-keyword">int</span> AC[<span class="hljs-number">1000005</span>],RIB[<span class="hljs-number">1000005</span>];<br>Treap&lt;kkk&gt;treap;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> ui;<br>    <span class="hljs-function">ui <span class="hljs-title">randNum</span><span class="hljs-params">(ui&amp; seed, ui last, <span class="hljs-keyword">const</span> ui m)</span> </span>&#123;<br>    seed = seed * <span class="hljs-number">17</span> + last;<br>    <span class="hljs-keyword">return</span> seed % m + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    srand(time(<span class="hljs-literal">NULL</span>));<br>    <span class="hljs-keyword">int</span> T,last=<span class="hljs-number">7</span>;<br>    <span class="hljs-comment">//注意了,是开始为7,不是每组数据都重置为7</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;T);<br>    <span class="hljs-keyword">while</span>(T--) &#123;<br>        ui n,m,seed;<br>        treap.clear();<br>        <span class="hljs-built_in">memset</span>(AC,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> AC);<br>        <span class="hljs-built_in">memset</span>(RIB,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> RIB);<br>        <span class="hljs-comment">//数组一定要清干净!!!</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>,&amp;m,&amp;n,&amp;seed);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">register</span> ui i=<span class="hljs-number">0</span>;i&lt;n;i++) &#123;<br>            ui a=randNum(seed,last,m),b=randNum(seed,last,m);<br>            treap.remove(treap.root,(kkk)&#123;AC[a],RIB[a]&#125;);<br>            AC[a]++; RIB[a]+=b;<br>            treap.insert(treap.root,(kkk)&#123;AC[a],RIB[a]&#125;);<br>            <span class="hljs-comment">//其实可以便插便查排名</span><br>            last=treap.rank(treap.root,(kkk)&#123;AC[a],RIB[a]&#125;);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,last);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> BST </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
