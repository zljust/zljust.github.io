<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zl_just</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zljust.github.io/"/>
  <updated>2019-06-21T15:18:00.072Z</updated>
  <id>http://zljust.github.io/</id>
  
  <author>
    <name>zl_just</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Welcome To My Blog</title>
    <link href="http://zljust.github.io/5121/01/14/Welcome/"/>
    <id>http://zljust.github.io/5121/01/14/Welcome/</id>
    <published>5121-01-13T16:00:00.000Z</published>
    <updated>2019-06-21T15:18:00.072Z</updated>
    
    <content type="html"><![CDATA[<p>$ \Huge\color{blue} Welcome $ $ \Huge\color{blue} To $ $ \Huge\color{blue} My $ $ \Huge\color{blue} Blog $<br>花了一个晚上，好累呀<br>$QWQ$  </p><p><strong>加油呀！！！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;$ \Huge\color{blue} Welcome $ $ \Huge\color{blue} To $ $ \Huge\color{blue} My $ $ \Huge\color{blue} Blog $&lt;br&gt;花了一个晚上，好累呀&lt;br&gt;$QWQ$  &lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="休闲" scheme="http://zljust.github.io/tags/%E4%BC%91%E9%97%B2/"/>
    
  </entry>
  
  <entry>
    <title>JoJo观后感</title>
    <link href="http://zljust.github.io/2020/01/22/JoJo/"/>
    <id>http://zljust.github.io/2020/01/22/JoJo/</id>
    <published>2020-01-21T16:00:00.000Z</published>
    <updated>2020-01-22T14:33:07.967Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=786262&auto=1&height=66"></iframe><p>$test$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
    
      <category term="休闲" scheme="http://zljust.github.io/tags/%E4%BC%91%E9%97%B2/"/>
    
      <category term="漫评" scheme="http://zljust.github.io/tags/%E6%BC%AB%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>学习OI一周年祭</title>
    <link href="http://zljust.github.io/2019/07/07/%E4%B8%80%E5%91%A8%E5%B9%B4%E7%A5%AD/"/>
    <id>http://zljust.github.io/2019/07/07/一周年祭/</id>
    <published>2019-07-06T16:00:00.000Z</published>
    <updated>2019-07-06T16:45:38.618Z</updated>
    
    <content type="html"><![CDATA[<p>日常吐槽计算机老师,平均每周看见他一次(<del>而且还不是在机房</del>)  </p><a id="more"></a><p>一年前我还在写这个:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,b,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我还在写<a href="https://www.luogu.org/recordnew/show/10294957" target="_blank" rel="noopener">$A + B  promble$</a>  </p><p>虽然那时还没来洛谷。。。</p><p>现在我已经会写(bei)<a href="https://www.luogu.org/recordnew/show/20191030" target="_blank" rel="noopener">$A*B  promble$</a>  </p><p><del>蝴蝶变换是不可能学会的了，这辈子都不可能学会的了，只会背背板子</del> </p><p>$AC$的第一道<a href="https://www.luogu.org/recordnew/show/15787102" target="_blank" rel="noopener">紫题</a></p><p>唯一$AC$的<a href="https://www.luogu.org/recordnew/show/20005895" target="_blank" rel="noopener">黑题</a></p><p>已学会的的算(ban)法(zi):</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Dijkstra</span><br><span class="line">SPFA</span><br><span class="line">kruskral</span><br><span class="line">树状数组</span><br><span class="line">ST表</span><br><span class="line">线段树(基础</span><br><span class="line">Treap</span><br><span class="line">强连通分量的tarjan</span><br><span class="line">矩阵乘法快速幂</span><br><span class="line">模拟退火(老是写爆</span><br><span class="line">主席树(基础</span><br><span class="line">树链剖分(需要练习</span><br><span class="line">FFT(朴素</span><br><span class="line">树套树(线段树套Treap(基础</span><br></pre></td></tr></table></figure><p>好少 $QWQ$</p><p>大多已经忘了($NOIP$<del>再复习吧</del>)</p><p>希望学会的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Splay</span><br><span class="line">CDQ分治</span><br><span class="line">Tire</span><br><span class="line">高斯消元</span><br><span class="line">各种毒瘤数据结构</span><br><span class="line">各种DP</span><br></pre></td></tr></table></figure><p><a href="https://zljust.github.io/2019/07/06/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%A5%97%E5%B9%B3%E8%A1%A1%E6%A0%91/">$ \text{码了10个小时的Code(大于号小于号写反了查了仨小时 qwq)}$</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日常吐槽计算机老师,平均每周看见他一次(&lt;del&gt;而且还不是在机房&lt;/del&gt;)  &lt;/p&gt;
    
    </summary>
    
    
      <category term="休闲" scheme="http://zljust.github.io/tags/%E4%BC%91%E9%97%B2/"/>
    
  </entry>
  
  <entry>
    <title>线段树套平衡树--Treap</title>
    <link href="http://zljust.github.io/2019/07/06/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%A5%97%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    <id>http://zljust.github.io/2019/07/06/线段树套平衡树/</id>
    <published>2019-07-06T15:55:05.829Z</published>
    <updated>2019-07-06T16:03:02.418Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P3380" target="_blank" rel="noopener">P3380 【模板】二逼平衡树(树套树)</a><br>细节:<br><strong>1.</strong>每次查询比<code>x</code>小的数,排名为<code>query(...) + 1</code><br><strong>2.</strong>二分时查找<code>&lt;=k</code>中最大的<br><a id="more"></a><br><strong>3.</strong>记得区分<code>TreapNode* &amp;o</code>与<code>TreapNode *o</code><br><strong>4.空间一定要开大!!!</strong>,<del>擦边必爆</del>  </p><p>$Code:$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Temp template<span class="meta-string">&lt;typename T&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> In inline</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483647</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Temp In T <span class="title">mod</span><span class="params">(T x,T y)</span> </span>&#123; <span class="keyword">return</span> x&lt;y?x:x%y; &#125;</span><br><span class="line"><span class="function">Temp In T <span class="title">max</span><span class="params">(T a,T b)</span> </span>&#123; <span class="keyword">return</span> a&gt;b?a:b; &#125;</span><br><span class="line"><span class="function">Temp In T <span class="title">min</span><span class="params">(T a,T b)</span> </span>&#123; <span class="keyword">return</span> a&gt;b?b:a; &#125;</span><br><span class="line"><span class="function">Temp In T <span class="title">max_min</span><span class="params">(T a,T b,<span class="keyword">int</span> d)</span> </span>&#123; <span class="keyword">return</span> d==<span class="number">-1</span>?max(a,b):min(a,b); &#125;</span><br><span class="line"><span class="function">Temp In T <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">while</span>((a=getchar()-<span class="string">'0'</span>)) <span class="keyword">if</span>(a&gt;<span class="number">0</span>&amp;&amp;a&lt;<span class="number">10</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">while</span>((c=getchar())) &#123;</span><br><span class="line"><span class="keyword">if</span>(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>) <span class="keyword">break</span>;</span><br><span class="line">a=(a&lt;&lt;<span class="number">1</span>)+(a&lt;&lt;<span class="number">3</span>)+c-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不知道为啥Temp会使函数的语法高亮失效 QWQ</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">queue</span> &#123;</span></span><br><span class="line">T s[maxn];</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="built_in">queue</span>() &#123; l=r=<span class="number">0</span>; &#125;</span><br><span class="line"><span class="function">In <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123; l=r=<span class="number">0</span>; &#125;</span><br><span class="line"><span class="function">In T <span class="title">front</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span>  s[mod(l+<span class="number">1</span>,maxn)];&#125;</span><br><span class="line"><span class="function">In <span class="keyword">void</span> <span class="title">push</span><span class="params">(T x)</span> </span>&#123; s[r=mod(r+<span class="number">1</span>,maxn)]=x; &#125;</span><br><span class="line"><span class="function">In <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123; l=mod(l+<span class="number">1</span>,maxn); &#125;</span><br><span class="line"><span class="function">In <span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> l==r; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SegmentTree_Treap</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Treap部分</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreapNode</span> &#123;</span></span><br><span class="line">T v;</span><br><span class="line"><span class="keyword">int</span> c,s,r;</span><br><span class="line">TreapNode *ch[<span class="number">2</span>];</span><br><span class="line"><span class="function">In <span class="keyword">int</span> <span class="title">cmp</span><span class="params">(T x)</span> </span>&#123; <span class="keyword">return</span> x==v?<span class="number">-1</span>:x&gt;v; &#125;</span><br><span class="line"><span class="function">In <span class="keyword">int</span> <span class="title">ch_size</span><span class="params">(<span class="keyword">int</span> d)</span> </span>&#123; <span class="keyword">return</span> ch[d]?ch[d]-&gt;s:<span class="number">0</span>; &#125;</span><br><span class="line"><span class="function">In <span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123; s=c+ch_size(<span class="number">0</span>)+ch_size(<span class="number">1</span>); &#125;</span><br><span class="line">&#125;e[maxn*<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="built_in">queue</span>&lt;TreapNode*&gt;freenodes;</span><br><span class="line"></span><br><span class="line"><span class="function">In <span class="keyword">void</span> <span class="title">creat</span><span class="params">(TreapNode* &amp;o,T x,<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!freenodes.empty()) &#123; o=freenodes.front(); freenodes.pop(); &#125;</span><br><span class="line"><span class="keyword">else</span> o=&amp;e[++tot];</span><br><span class="line">o-&gt;v=x,o-&gt;r=rand();</span><br><span class="line">o-&gt;c=o-&gt;s=num;</span><br><span class="line">o-&gt;ch[<span class="number">0</span>]=o-&gt;ch[<span class="number">1</span>]=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">In <span class="keyword">void</span> <span class="title">del</span><span class="params">(TreapNode *o)</span> </span>&#123; freenodes.push(o); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">In <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(TreapNode* &amp;o,<span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">TreapNode *k=o-&gt;ch[d^<span class="number">1</span>]; o-&gt;ch[d^<span class="number">1</span>]=k-&gt;ch[d],k-&gt;ch[d]=o;</span><br><span class="line">o-&gt;maintain(); k-&gt;maintain(); o=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(TreapNode* &amp;o,T x,<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!o) <span class="keyword">return</span> creat(o,x,num);</span><br><span class="line"><span class="keyword">int</span> d=o-&gt;cmp(x);</span><br><span class="line"><span class="keyword">if</span>(d==<span class="number">-1</span>) &#123; o-&gt;c+=num,o-&gt;s+=num; <span class="keyword">return</span> ; &#125;</span><br><span class="line">insert(o-&gt;ch[d],x,num); o-&gt;maintain();</span><br><span class="line"><span class="keyword">if</span>(o-&gt;r &lt; o-&gt;ch[d]-&gt;r) rotate(o,d^<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(TreapNode* &amp;o,T x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!o) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">int</span> d=o-&gt;cmp(x);</span><br><span class="line"><span class="keyword">if</span>(d==<span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(o-&gt;c &gt; <span class="number">1</span>) &#123; o-&gt;c--,o-&gt;s--; <span class="keyword">return</span> ; &#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!o-&gt;ch[<span class="number">0</span>]) &#123; del(o); o=o-&gt;ch[<span class="number">1</span>]; &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!o-&gt;ch[<span class="number">1</span>]) &#123; del(o); o=o-&gt;ch[<span class="number">0</span>]; &#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> d2=o-&gt;ch[<span class="number">1</span>]-&gt;r &lt; o-&gt;ch[<span class="number">0</span>]-&gt;r;</span><br><span class="line">rotate(o,d2),remove(o-&gt;ch[d2],x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> remove(o-&gt;ch[d],x);</span><br><span class="line"><span class="keyword">if</span>(o) o-&gt;maintain();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rank</span><span class="params">(TreapNode *o,T x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> rk=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(o)  &#123;</span><br><span class="line"><span class="keyword">int</span> d=o-&gt;cmp(x);</span><br><span class="line"><span class="keyword">if</span>(d==<span class="number">-1</span>) <span class="keyword">return</span> rk+o-&gt;ch_size(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(d) rk+=o-&gt;ch_size(<span class="number">0</span>)+o-&gt;c;</span><br><span class="line">o=o-&gt;ch[d];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-1求前驱,1求后继</span></span><br><span class="line"><span class="function">T <span class="title">Get</span><span class="params">(TreapNode *o,T x,<span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">T ans=INF*d;</span><br><span class="line"><span class="keyword">while</span>(o) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> &lt; (o-&gt;v - x) * d) ans=o-&gt;v,o=o-&gt;ch[d==<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">else</span> o=o-&gt;ch[d!=<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SegmentTree部分</span></span><br><span class="line">TreapNode *s[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function">In <span class="keyword">int</span> <span class="title">lc</span><span class="params">(<span class="keyword">int</span> o)</span> </span>&#123; <span class="keyword">return</span> o&lt;&lt;<span class="number">1</span>; &#125;</span><br><span class="line"><span class="function">In <span class="keyword">int</span> <span class="title">rc</span><span class="params">(<span class="keyword">int</span> o)</span> </span>&#123; <span class="keyword">return</span> (o&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(TreapNode *o,TreapNode* &amp;Tree)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!o) <span class="keyword">return</span> ;</span><br><span class="line">insert(Tree,o-&gt;v,o-&gt;c);</span><br><span class="line">DFS(o-&gt;ch[<span class="number">0</span>],Tree),DFS(o-&gt;ch[<span class="number">1</span>],Tree);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> L,<span class="keyword">int</span> R,T *A)</span> </span>&#123;</span><br><span class="line">s[o]=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(L==R) <span class="keyword">return</span> insert(s[o],A[L],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(lc(o),L,mid,A),build(rc(o),mid+<span class="number">1</span>,R,A);</span><br><span class="line">DFS(s[lc(o)],s[o]),DFS(s[rc(o)],s[o]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,T x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=L&amp;&amp;r&gt;=R) <span class="keyword">return</span> Rank(s[o],x);</span><br><span class="line"><span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) ans=query(lc(o),L,mid,l,r,x);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) ans+=query(rc(o),mid+<span class="number">1</span>,R,l,r,x);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">Query</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,T x,<span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=L&amp;&amp;r&gt;=R) <span class="keyword">return</span> Get(s[o],x,d);</span><br><span class="line"><span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>; T ans=INF*d;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) ans=Query(lc(o),L,mid,l,r,x,d);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) ans=max_min(ans,Query(rc(o),mid+<span class="number">1</span>,R,l,r,x,d),d);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">update</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> a,T x)</span> </span>&#123;</span><br><span class="line">T ago;</span><br><span class="line"><span class="keyword">if</span>(L==R) &#123; ago=s[o]-&gt;v; s[o]-&gt;v=x; <span class="keyword">return</span> ago; &#125;</span><br><span class="line"><span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a&lt;=mid) ago=update(lc(o),L,mid,a,x);</span><br><span class="line"><span class="keyword">else</span> ago=update(rc(o),mid+<span class="number">1</span>,R,a,x);</span><br><span class="line">remove(s[o],ago),insert(s[o],x,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> ago;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SegmentTree_Treap() &#123; tot=<span class="number">0</span>; &#125;</span><br><span class="line"><span class="function">In <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123; tot=<span class="number">0</span>; freenodes.clear(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DeBug</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreapNode *o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!o) <span class="keyword">return</span> ;</span><br><span class="line">    dfs(o-&gt;ch[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"    v %d c %d\n"</span>,o-&gt;v,o-&gt;c);</span><br><span class="line">    dfs(o-&gt;ch[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"o: %d l: %d r: %d\n"</span>,o,L,R); dfs(s[o]);</span><br><span class="line"><span class="keyword">if</span>(L==R) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">Test(lc(o),L,mid),Test(rc(o),mid+<span class="number">1</span>,R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> A[maxn];</span><br><span class="line">SegmentTree_Treap&lt;<span class="keyword">int</span>&gt;t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> opt,l,r,x;</span><br><span class="line">read(n),read(m);</span><br><span class="line"><span class="keyword">for</span>(Re <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) read(A[i]);</span><br><span class="line">t.build(<span class="number">1</span>,<span class="number">1</span>,n,A);</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">    <span class="comment">//t.Test(1,1,n);</span></span><br><span class="line">    read(opt),read(l),read(r);</span><br><span class="line">    <span class="keyword">if</span>(opt==<span class="number">3</span>) &#123; t.update(<span class="number">1</span>,<span class="number">1</span>,n,l,r); <span class="keyword">continue</span>; &#125;</span><br><span class="line">    read(x);</span><br><span class="line">    <span class="keyword">if</span>(opt==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,t.query(<span class="number">1</span>,<span class="number">1</span>,n,l,r,x) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> L=<span class="number">0</span>,R=<span class="number">1e8</span>;</span><br><span class="line">    <span class="keyword">while</span>(L&lt;R) &#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(L+R+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(t.query(<span class="number">1</span>,<span class="number">1</span>,n,l,r,mid) + <span class="number">1</span> &lt;= x) L=mid;</span><br><span class="line">    <span class="keyword">else</span> R=mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,L);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,t.Query(<span class="number">1</span>,<span class="number">1</span>,n,l,r,x,opt==<span class="number">4</span>?<span class="number">-1</span>:<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3380&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;P3380 【模板】二逼平衡树(树套树)&lt;/a&gt;&lt;br&gt;细节:&lt;br&gt;&lt;strong&gt;1.&lt;/strong&gt;每次查询比&lt;code&gt;x&lt;/code&gt;小的数,排名为&lt;code&gt;query(...) + 1&lt;/code&gt;&lt;br&gt;&lt;strong&gt;2.&lt;/strong&gt;二分时查找&lt;code&gt;&amp;lt;=k&lt;/code&gt;中最大的&lt;br&gt;
    
    </summary>
    
    
      <category term="线段树" scheme="http://zljust.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="平衡树" scheme="http://zljust.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="树套树" scheme="http://zljust.github.io/tags/%E6%A0%91%E5%A5%97%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>树链剖分</title>
    <link href="http://zljust.github.io/2019/06/29/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    <id>http://zljust.github.io/2019/06/29/树链剖分/</id>
    <published>2019-06-28T16:00:00.000Z</published>
    <updated>2019-06-29T15:16:22.698Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P3384" target="_blank" rel="noopener">P3384 【模板】树链剖分</a></p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s,p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">mod</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;=p?x%p:x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SegmentTree</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> s[maxn&lt;&lt;<span class="number">2</span>],add[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lc</span><span class="params">(<span class="keyword">int</span> o)</span> </span>&#123; <span class="keyword">return</span> o&lt;&lt;<span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rc</span><span class="params">(<span class="keyword">int</span> o)</span> </span>&#123; <span class="keyword">return</span> (o&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> k)</span> </span>&#123; s[o]=mod(s[o]+(R-L+<span class="number">1</span>)*k),add[o]=mod(add[o]+k); &#125; </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!add[o]) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        Add(lc(o),L,mid,add[o]),Add(rc(o),mid+<span class="number">1</span>,R,add[o]);</span><br><span class="line">        add[o]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> _update(<span class="keyword">int</span> o,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> inc) &#123;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;=L&amp;&amp;r&gt;=R) <span class="keyword">return</span> Add(o,L,R,inc);</span><br><span class="line">        pushdown(o,L,R);</span><br><span class="line">        <span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;=mid) _update(lc(o),L,mid,l,r,inc);</span><br><span class="line">        <span class="keyword">if</span>(r&gt;mid) _update(rc(o),mid+<span class="number">1</span>,R,l,r,inc);</span><br><span class="line">        s[o]=s[lc(o)]+s[rc(o)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> _query(<span class="keyword">int</span> o,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r) &#123;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;=L&amp;&amp;r&gt;=R) <span class="keyword">return</span> s[o];</span><br><span class="line">        pushdown(o,L,R);</span><br><span class="line">        <span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;=mid) ans=_query(lc(o),L,mid,l,r);</span><br><span class="line">        <span class="keyword">if</span>(r&gt;mid) ans+=_query(rc(o),mid+<span class="number">1</span>,R,l,r);</span><br><span class="line">        <span class="keyword">return</span> mod(ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> _build(<span class="keyword">int</span> o,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> *w,<span class="keyword">int</span> *r) &#123;</span><br><span class="line">        <span class="keyword">if</span>(L==R) <span class="keyword">return</span> s[o]=w[r[L]];</span><br><span class="line">        <span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> s[o]=mod(_build(lc(o),L,mid,w,r)+_build(rc(o),mid+<span class="number">1</span>,R,w,r));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span> </span>&#123; _update(<span class="number">1</span>,<span class="number">1</span>,n,l,r,k); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123; <span class="keyword">return</span> _query(<span class="number">1</span>,<span class="number">1</span>,n,l,r); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> size,<span class="keyword">int</span> *w,<span class="keyword">int</span> *r)</span> </span>&#123; _build(<span class="number">1</span>,<span class="number">1</span>,size,w,r); &#125;</span><br><span class="line">&#125;t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn],v[maxn&lt;&lt;<span class="number">1</span>],nxt[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> size[maxn],d[maxn],fa[maxn],son[maxn],top[maxn],seg[maxn],rev[maxn],w[maxn];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    nxt[++tot]=head[x],v[head[x]=tot]=y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DfsOne</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    size[u]=<span class="number">1</span>; d[u]=d[fa[u]]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i]) <span class="keyword">if</span>(fa[u]!=v[i]) &#123;</span><br><span class="line">        fa[v[i]]=u;</span><br><span class="line">        DfsOne(v[i]);</span><br><span class="line">        size[u]+=size[v[i]];</span><br><span class="line">        <span class="keyword">if</span>(size[v[i]]&gt;size[son[u]]) son[u]=v[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DfsTwo</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!son[u]) <span class="keyword">return</span> ;</span><br><span class="line">    top[rev[seg[son[u]]=++seg[<span class="number">0</span>]]=son[u]]=top[u];</span><br><span class="line">    DfsTwo(son[u]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i]) <span class="keyword">if</span>(!top[v[i]]) &#123;</span><br><span class="line">        top[rev[seg[v[i]]=++seg[<span class="number">0</span>]]=v[i]]=v[i];</span><br><span class="line">        DfsTwo(v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> inc)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(d[top[x]]&lt;d[top[y]]) swap(x,y);</span><br><span class="line">        t.update(seg[top[x]],seg[x],inc);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(d[x]&gt;d[y]) swap(x,y);</span><br><span class="line">    t.update(seg[x],seg[y],inc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(d[top[x]]&lt;d[top[y]]) swap(x,y);</span><br><span class="line">        ans=mod(ans+t.query(seg[top[x]],seg[x]));</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(d[x]&gt;d[y]) swap(x,y);</span><br><span class="line">    <span class="keyword">return</span> mod(ans+t.query(seg[x],seg[y]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">while</span>((a=getchar()-<span class="string">'0'</span>)) <span class="keyword">if</span>(a&gt;<span class="number">0</span>&amp;&amp;a&lt;<span class="number">10</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=getchar())) &#123;</span><br><span class="line">        <span class="keyword">if</span>(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>) <span class="keyword">break</span>;</span><br><span class="line">        a=a*<span class="number">10</span>+c-<span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cmd,x,y,inc;</span><br><span class="line">    read(n),read(m),read(s),read(p);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line">    <span class="keyword">for</span>(R <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) read(w[i]),w[i]=mod(w[i]);</span><br><span class="line">    <span class="keyword">for</span>(R <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i) &#123;</span><br><span class="line">        read(x),read(y);</span><br><span class="line">        add(x,y),add(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    rev[seg[s]=seg[<span class="number">0</span>]=<span class="number">1</span>]=top[s]=s;</span><br><span class="line">    DfsOne(s);</span><br><span class="line">    DfsTwo(s);</span><br><span class="line">    t.build(seg[<span class="number">0</span>],w,rev);</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        read(cmd); read(x);</span><br><span class="line">        <span class="keyword">if</span>(cmd==<span class="number">1</span>) &#123;</span><br><span class="line">            read(y),read(inc);</span><br><span class="line">            update(x,y,inc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cmd==<span class="number">2</span>) &#123;</span><br><span class="line">            read(y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(x,y));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cmd==<span class="number">3</span>) &#123;</span><br><span class="line">            read(inc);</span><br><span class="line">            t.update(seg[x],seg[x]+size[x]<span class="number">-1</span>,inc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,t.query(seg[x],seg[x]+size[x]<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3384&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;P3384 【模板】树链剖分&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="树链剖分" scheme="http://zljust.github.io/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>从零开始的状压DP</title>
    <link href="http://zljust.github.io/2019/06/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E7%8A%B6%E5%8E%8BDP/"/>
    <id>http://zljust.github.io/2019/06/21/从零开始的状压DP/</id>
    <published>2019-06-20T16:00:00.000Z</published>
    <updated>2020-01-22T14:31:08.580Z</updated>
    
    <content type="html"><![CDATA[<p>啥，你说呢不知道什么叫做状压$DP$，没关系，<del>我也不知道</del>    </p><p><del>本文包教包会，学会了记得点个赞</del></p><a id="more"></a>  <p>前置芝士: 一点点DP思想$and$基础位运算</p><h2 id="复杂状态的动规解法"><a href="#复杂状态的动规解法" class="headerlink" title="复杂状态的动规解法"></a>复杂状态的动规解法</h2><p><strong>Eg</strong> :  </p><p>已知平面上有$n$个点($n$为偶数，n&lt;19)，找出一种点<strong>两两配对</strong>的方法使得点对之间的<strong>距离总和</strong>最小  </p><p><strong>解析:</strong> </p><p>我们将所有的点看成一个点集，记为$S$，$d(S)$表示所有点配对时距离的最小值，那我们很容易的得到这样的一个式子</p><script type="math/tex; mode=display">d(S)=min \left\{\right.\ |P_iP_j| +\ d( S- \left\{\right. i \left.\right\}-\left\{\right.j \left. \right\}\ ) \left. \right\},i\in S,j\in S</script><p>那么决策数为$n^2$，状态数为$2^n$，总复杂度为$O(n^22^n)$   </p><p>是不是感受到了$DP$的魅力</p><p>不过我们发现,<strong>当状态为$S$时，我们不管先选择哪个点作为$i$，它迟早都要被选择</strong>,举个栗子吧  </p><p>我们有点集{$1$,$2$,$3$,$4$}(集合中为点的编号)，我先枚举第一个点，再枚举选择的第二个点，可第一个点就算选了$1$,而不选$2$，$2$也会在下一个状态中出现，并尝试与$3$,$4$点配对  </p><p><img src="https://i.loli.net/2019/06/21/5d0cb7f04ffac18834.png" alt></p><p>而$1$已经在第一轮与$2$尝试配对,并不会漏选状态，也就是说<strong>当有状态$S$时，我们只需要找出任意一个点，并枚举其他点与之配对，将决策数减少到了$n$</strong>,那那任意的一个点选哪个好呢?为了方便，我们就选集合中编号最小的一个点吧,状态转移方程就是</p><script type="math/tex; mode=display">d(S)=min \left\{\right.\ |P_iP_j| +\ d( S- \left\{\right. i \left.\right\}-\left\{\right.j \left. \right\}\ ) \left. \right\},i=min\ S,j\in S</script><p>复杂度优化到了$O(n2^n)$  </p><p>再看下面的一道相同的例题:  <a href="https://www.luogu.org/problemnew/show/P2831" target="_blank" rel="noopener">愤怒的小鸟</a>  </p><p><strong>题目描述:</strong>  </p><p>平面是有$n$(n&lt;=18)个点,选择任意个的点配对，满足这些点都在<strong>同一条抛物线</strong>上，这条抛物线<strong>过原点</strong>且抛物线<strong>开口朝下</strong>,求一种配对方法使所配对数最少</p><p><strong>解析:</strong>  </p><p>同样我们将这些点看成集合$S$,$d(S)$表示所需最少的配对数，由初中知识，确定一条抛物线至少需要三个点，因为已知了原点，所以我们每次配对只需枚举两个点</p><p>那我们同样有</p><script type="math/tex; mode=display">d(S)=min \left\{\right. \ d( S- F(i,j)) \left. \right\}+1,i=min\ S,j\in S,F(i,j)\notin \phi</script><p>$F(i,j)$表示$i$和$j$点所组成抛物线的点集，如果$i$,$j$不能组成符合题意的，那我们就不允许状态转移，但我们同样要注意一点，如果对于任意一点都无法与$i$配对成合法抛物线，那我们进行这样的转移</p><script type="math/tex; mode=display">d(S)=\ d(S\ -\left\{\right. i \left. \right\} )+1,i=min\ S</script><p>对于$F(i,j)$的计算我们只需$O(n^3)$预处理了</p><p>$Code$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">19</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">10e-8</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> f[maxn][maxn],d[<span class="number">1</span>&lt;&lt;maxn];</span><br><span class="line"><span class="keyword">double</span> x[maxn],y[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> y,<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> newy=x*(a*x+b);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(newy-y)&lt;eps;</span><br><span class="line">    <span class="comment">//判断点(x,y)是否在抛物线y=a*x^2+b*x上,并允许一定的误差</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!S) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//空集,不需要配对</span></span><br><span class="line">    <span class="keyword">if</span>(d[S]) <span class="keyword">return</span> d[S];</span><br><span class="line">    d[S]=INF;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(S&amp;(<span class="number">1</span>&lt;&lt;i))) ++i;<span class="comment">//找出最小没被配对的点</span></span><br><span class="line">    d[S]=min(d[S],dp(S-(<span class="number">1</span>&lt;&lt;i))+<span class="number">1</span>);<span class="comment">//进行状态转移二</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;++j) <span class="keyword">if</span>(S&amp;(<span class="number">1</span>&lt;&lt;j)&amp;&amp;f[i][j])</span><br><span class="line">        d[S]=min(d[S],dp(S&amp;(~(f[i][j])))+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//转移一,S&amp;(~(f[i][j]))即S-F(i,j)</span></span><br><span class="line">    <span class="keyword">return</span> d[S];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j) &#123;</span><br><span class="line">                <span class="keyword">if</span>(x[i]==x[j]||x[i]*y[j]==x[j]*y[i]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">//x[i]*y[j]==x[j]*y[i]即判断三点是否共线</span></span><br><span class="line">                <span class="keyword">double</span> a=(x[i]*y[j]-x[j]*y[i])/((x[i]*x[j])*(x[j]-x[i])),b=(y[i]-a*x[i]*x[i])/x[i];</span><br><span class="line">                <span class="keyword">if</span>(a&gt;<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;++k) <span class="keyword">if</span>(check(x[k],y[k],a,b)) f[i][j]+=<span class="number">1</span>&lt;&lt;k;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp((<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>));</span><br><span class="line">        <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$Q.E.D$  </p><p>练习题大家自己找吧，毕竟我也是新手  $qwq$</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;啥，你说呢不知道什么叫做状压$DP$，没关系，&lt;del&gt;我也不知道&lt;/del&gt;    &lt;/p&gt;
&lt;p&gt;&lt;del&gt;本文包教包会，学会了记得点个赞&lt;/del&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="note" scheme="http://zljust.github.io/tags/note/"/>
    
      <category term="DP" scheme="http://zljust.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>最短路学习笔记</title>
    <link href="http://zljust.github.io/2019/06/21/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://zljust.github.io/2019/06/21/最短路学习笔记/</id>
    <published>2019-06-20T16:00:00.000Z</published>
    <updated>2019-06-21T17:00:41.873Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍两种最短路算法:</p><p><strong>1.Dijkstra</strong>  </p><p><strong>2.SPFA</strong><br><a id="more"></a></p><p>($floyd$:喂喂，我也太没有面子了吧!!!)</p><p><del>全为博主本人$yy$，与真正的算法解释有些不同</del></p><p>何为最短路?  </p><p>就是在<strong>带权图</strong>(因为无权图上可以用$BFS$)上从一个源点$s$到终点$t$所需的最小花费,这两种算法都适用<strong>无向图</strong>和<strong>有向图</strong></p><p>啥，你问<strong>图</strong>是神马？</p><p>阿啦啦，那就为你解释一下吧:</p><p><img src="https://i.loli.net/2019/06/21/5d0cf9ac460a890456.png" alt></p><p>这幅$picture$中<del><strong>圈起来的数字叫做点(v)，连起来的线叫做边(e)，边上的数字叫做权(值)</strong></del>,一整体我们叫做<strong>图($Graph$)</strong></p><p>想象一下，有$7$个城市，我们标号为$1~6$，我们要坐车从一个城市到另一个城市，显然有些城市之间有路,如:$1$和$3$,花费为$3$  </p><p>有些图是<strong>有向</strong>的，有些图是<strong>无向</strong>,记得<strong>无向图要开双倍边</strong>，啥，听不懂?先看下面的吧</p><p>那我们怎么用<code>C++</code>表示出来呢?</p><p>我们用一结构体表示</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="comment">//点数和边数视题而定</span></span><br><span class="line"><span class="keyword">int</span> head[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> v,w,next;</span><br><span class="line">  <span class="comment">//终点为v,权值为w,nxt为下条边的编号</span></span><br><span class="line">&#125;e[maxm];</span><br><span class="line"><span class="keyword">int</span> en;</span><br></pre></td></tr></table></figure><p>加边操作:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>&#123; <span class="comment">//起点为u,终点为v,权值为w</span></span><br><span class="line">    e[++en].nxt=head[u]; head[u]=en;</span><br><span class="line">    e[en].v=v; e[en].w=w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此为邻接链表</span></span><br><span class="line"><span class="comment">//如果是无向图就调用add(u,v,w); add(v,u,w);</span></span><br></pre></td></tr></table></figure><p>遍历:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=e[i].nxt) &#123;</span><br><span class="line">    <span class="comment">//Do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看不懂?</p><p>那就用$vector$吧，<del><strong>虽然跑得慢，但容易理解呀</strong></del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,w;</span><br><span class="line">    <span class="comment">//终点与权值</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt;head[maxn];</span><br><span class="line"><span class="comment">//head[u][i]表示起点为u的第i条边</span></span><br></pre></td></tr></table></figure><p>加边:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">head[u].push_back((node)&#123;v,w&#125;);</span><br><span class="line"><span class="comment">//无向图再来一次head[v].push_back((node)&#123;u,w&#125;);</span></span><br></pre></td></tr></table></figure><p>遍历:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;head[u].size();i++) &#123;</span><br><span class="line">    <span class="comment">//Do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h2><p>终于到了主角上场了，累死我了</p><p>适用范围:<strong>正权图，单源最短路</strong></p><p>算法本质:<strong>贪心</strong></p><p>还是以之前的图为例<img src="https://i.loli.net/2019/06/21/5d0cf9ac460a890456.png" alt></p><p>记$d[i]$为从$0$号节点出发到达$i$节点的最小花费($d[0]=0$),在算法开始前,我们记其他点$k  d[k]=INF$，$INF$为一个极大值</p><p>我们从$0$号节点出发，发现以$0$号为起点的边边权最小的边是$e(0,1)$,权为$3$，那么我们断定从$0$到$3$的最小花费一点为$3$，因为既然从$e(0,1)$是边权最小的一条边，那么从$0$号节点到达任意节点在转到$3$的花费一定大于$e(0,1)$，<strong>注意，此为正权图，所以花费一定会越来越大</strong>,所以我们记$d[1]=3$  </p><p>如果<strong>已知从$0$到$u$的最短距离为$d[u]$</strong>，那么我们这样做:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;head[u].size();i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> v=head[u][i].v,w=head[u][i].w;</span><br><span class="line">    <span class="keyword">if</span>(d[v]&gt;d[u]+w) d[v]=d[u]+w;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样称为<strong>松弛操作:</strong></p><p>既然从$u$到达$v$通过边$head[u] [i]$花费更小，那我不如走这条边使到$v$点的距离更小，将距离更新到$d[u]+w$</p><p><strong>算法流程:</strong> </p><p>我们有一个点集V,刚开始<strong>只有起点</strong>,通过我们的<strong>不断松弛</strong>，每次<strong>将松弛后的节点放入这个集合</strong>，再从集合中找出一个点，继续松弛，<strong>直到无法松弛</strong>为止，那我们也就找到了<strong>从起点到任意一点的最短距离</strong>了</p><p>那怎么找出任意一点,<del>(随机数？</del>，再举个例子吧，仍以上图为例:</p><p>我们先有节点$0$，我们发现可以松弛$1$和$2$(因为$d[1]$和$d[2]$原本为一个超大的数),那我们再从哪个点开始松弛呢?</p><p>李华:我知道！！从$2$开始,再接着$3$,$4$,$5$，我们得到$d[5]=13$，再…</p><p>。。。</p><p>经过了大量的松弛，我们得到了$d[5]$其实为$6$…</p><p>从上面的讨论中我们发现了啥?</p><p><strong>不好的松弛顺序会使算法做了大量的无用功!!!</strong>  </p><p>那我们该怎么优化呢?</p><p>津津:简单，选择<strong>$d[i]$最小的那个呗，如果$i$号节点已经被选择了，那就忽视它！</strong></p><p>很好，这就是<strong>真正的$Dijkstra$算法</strong>，选择最小的$d[i]$我们可以<strong>用优先队列来维护</strong>，复杂度为$O(mlogn)$,$m$为边数，$n$为点数</p><p>以<a href="https://www.luogu.org/problemnew/show/P1339" target="_blank" rel="noopener">P1339 热浪</a>为例</p><p>$Code$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxe = <span class="number">6200</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxv = <span class="number">2500</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1</span>&lt;&lt;<span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c;  a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=getchar()))  <span class="keyword">if</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        a=a*<span class="number">10</span>+c-<span class="string">'0'</span>;</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;<span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Headnode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,d;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;  (<span class="keyword">const</span> Headnode&amp; b) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> d&gt;b.d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,w,next;</span><br><span class="line">&#125;E[maxe*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> en=<span class="number">0</span>,e,v,st,end;</span><br><span class="line"><span class="keyword">int</span> head[maxv],dis[maxv];</span><br><span class="line">priority_queue&lt;Headnode&gt;q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    E[++en].v=v; E[en].w=w;</span><br><span class="line">    E[en].next=head[u];</span><br><span class="line">    head[u]=en;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=v;i++) dis[i]=INF;</span><br><span class="line">    dis[s]=<span class="number">0</span>; q.push((Headnode)&#123;s,<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        Headnode x=q.top(); q.pop();</span><br><span class="line">        <span class="keyword">if</span>(x.d!=dis[x.u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x.u];i&gt;=<span class="number">0</span>;i=E[i].next) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[E[i].v]&gt;dis[x.u]+E[i].w) &#123;</span><br><span class="line">                dis[E[i].v]=dis[x.u]+E[i].w;</span><br><span class="line">                q.push((Headnode)&#123;E[i].v,dis[E[i].v]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u,p,w;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    read(v); read(e); read(st); read(end);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e;i++) &#123;</span><br><span class="line">        read(u); read(p); read(w);</span><br><span class="line">        add(u,p,w); add(p,u,w);</span><br><span class="line">    &#125;</span><br><span class="line">    Dijkstra(st);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dis[end]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很久以前的代码了，将就着看吧。。。</p><p>qwq</p><h2 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h2><p>有了以上的经验相信你一定可以更好地学习$SPFA$</p><p>适用范围:<strong>无负环图</strong></p><p>因为又负环的花就不存在最短路了，想一想为神马?</p><p>。。。</p><p>好了，睡觉了，坑以后再填。。。</p><p>$time:$ $0:47$</p><p>qwq</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将介绍两种最短路算法:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.Dijkstra&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.SPFA&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="note" scheme="http://zljust.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Splay</title>
    <link href="http://zljust.github.io/2019/06/18/Splay/"/>
    <id>http://zljust.github.io/2019/06/18/Splay/</id>
    <published>2019-06-17T16:00:00.000Z</published>
    <updated>2019-06-21T15:06:55.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初号机"><a href="#初号机" class="headerlink" title="初号机"></a>初号机</h1><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">read</span><span class="params">(T&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">while</span>((a=getchar()-<span class="string">'0'</span>)) <span class="keyword">if</span>(a&gt;<span class="number">0</span>&amp;&amp;a&lt;=<span class="number">9</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=getchar())) &#123;</span><br><span class="line">        <span class="keyword">if</span>(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>) <span class="keyword">return</span> a;</span><br><span class="line">        a=a*<span class="number">10</span>+c-<span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF =<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,s,filp;</span><br><span class="line">    Node* ch[<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ch_size</span><span class="params">(<span class="keyword">int</span> d)</span> </span>&#123; <span class="keyword">return</span> ch[d]?ch[d]-&gt;s:<span class="number">0</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123; s=<span class="number">1</span>+ch_size(<span class="number">0</span>)+ch_size(<span class="number">1</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!filp) <span class="keyword">return</span> ;</span><br><span class="line">        swap(ch[<span class="number">0</span>],ch[<span class="number">1</span>]); filp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(ch[<span class="number">0</span>]) ch[<span class="number">0</span>]-&gt;filp^=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(ch[<span class="number">1</span>]) ch[<span class="number">1</span>]-&gt;filp^=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch_size(<span class="number">0</span>)+<span class="number">1</span>==k) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> ch_size(<span class="number">0</span>)+<span class="number">1</span>&lt;k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;node[maxn];</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creat</span><span class="params">(Node* &amp;o,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    o=&amp;node[++size]; o-&gt;v=x;</span><br><span class="line">    o-&gt;s=<span class="number">1</span>; o-&gt;filp=<span class="number">0</span>;</span><br><span class="line">    o-&gt;ch[<span class="number">0</span>]=o-&gt;ch[<span class="number">1</span>]=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node* _build(Node* &amp;o,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span>* a) &#123;</span><br><span class="line">    <span class="keyword">if</span>(L&gt;R) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    creat(o,a[mid]);</span><br><span class="line">    _build(o-&gt;ch[<span class="number">0</span>],L,mid<span class="number">-1</span>,a);</span><br><span class="line">    _build(o-&gt;ch[<span class="number">1</span>],mid+<span class="number">1</span>,R,a);</span><br><span class="line">    o-&gt;maintain();</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">build</span><span class="params">(<span class="keyword">int</span>* a,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    Node* root=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> _build(root,<span class="number">1</span>,n,a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(Node* &amp;o,<span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    Node* k=o-&gt;ch[d^<span class="number">1</span>]; o-&gt;ch[d^<span class="number">1</span>]=k-&gt;ch[d],k-&gt;ch[d]=o;</span><br><span class="line">    o-&gt;maintain(); k-&gt;maintain(); o=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Node* &amp;o,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(o==<span class="literal">NULL</span>) <span class="keyword">return</span> creat(o,x);</span><br><span class="line">    insert(o-&gt;ch[o-&gt;v &lt; x],x);</span><br><span class="line">    o-&gt;maintain();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(Node* &amp;o,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    o-&gt;push_down();</span><br><span class="line">    <span class="keyword">int</span> d=o-&gt;cmp(k);</span><br><span class="line">    <span class="keyword">if</span>(d==<span class="number">1</span>) k-=o-&gt;ch_size(<span class="number">0</span>)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(d!=<span class="number">-1</span>) &#123;</span><br><span class="line">        Node* p=o-&gt;ch[d];</span><br><span class="line">        p-&gt;push_down();</span><br><span class="line">        <span class="keyword">int</span> d2=p-&gt;cmp(k),k2=k-(d2?(p-&gt;ch_size(<span class="number">0</span>)+<span class="number">1</span>):<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(d2!=<span class="number">-1</span>) &#123;</span><br><span class="line">            splay(p-&gt;ch[d2],k2);</span><br><span class="line">            <span class="keyword">if</span>(d==d2) rotate(o,d^<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> rotate(o-&gt;ch[d],d);</span><br><span class="line">        &#125;</span><br><span class="line">        rotate(o,d^<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">merge</span><span class="params">(Node* left,Node* right)</span> </span>&#123;</span><br><span class="line">    splay(left,left-&gt;s);</span><br><span class="line">    left-&gt;ch[<span class="number">1</span>]=right;</span><br><span class="line">    left-&gt;maintain();</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(Node* o,<span class="keyword">int</span> k,Node* &amp;left,Node* &amp;right)</span> </span>&#123;</span><br><span class="line">    splay(o,k);</span><br><span class="line">    left=o,right=o-&gt;ch[<span class="number">1</span>];</span><br><span class="line">    o-&gt;ch[<span class="number">1</span>]=<span class="literal">NULL</span>;</span><br><span class="line">    left-&gt;maintain();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> first=<span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Node* o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(o==<span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    o-&gt;push_down();</span><br><span class="line">    dfs(o-&gt;ch[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span>(o-&gt;v!=INF) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!first) first=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,o-&gt;v);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(o-&gt;ch[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    read(n); read(m);</span><br><span class="line">    a[<span class="number">1</span>]=INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i+<span class="number">1</span>]=i;</span><br><span class="line">    Node* root=build(a,n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        read(l); read(r);</span><br><span class="line">        Node *left,*right,*mid,*o;</span><br><span class="line">        split(root,l,left,o);</span><br><span class="line">        split(o,r-l+<span class="number">1</span>,mid,right);</span><br><span class="line">        mid-&gt;filp^=<span class="number">1</span>;</span><br><span class="line">        root=merge(merge(left,mid),right);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;初号机&quot;&gt;&lt;a href=&quot;#初号机&quot; class=&quot;headerlink&quot; title=&quot;初号机&quot;&gt;&lt;/a&gt;初号机&lt;/h1&gt;
    
    </summary>
    
    
      <category term="BST" scheme="http://zljust.github.io/tags/BST/"/>
    
  </entry>
  
  <entry>
    <title>逆序对</title>
    <link href="http://zljust.github.io/2019/06/18/%E9%80%86%E5%BA%8F%E5%AF%B9/"/>
    <id>http://zljust.github.io/2019/06/18/逆序对/</id>
    <published>2019-06-17T16:00:00.000Z</published>
    <updated>2019-06-21T15:11:06.696Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em><a href="https://www.luogu.org/problemnew/show/P1908" target="_blank" rel="noopener">原题</a></em></strong></p><h1 id="面对蒟蒻的逆序对"><a href="#面对蒟蒻的逆序对" class="headerlink" title="面对蒟蒻的逆序对"></a>面对<del>蒟蒻</del>的逆序对</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一看到题，我们脑海中的第一想法一定就是暴力,<br><a id="more"></a><br>对于每个数$a[i]$找出 $j<i$ ,并且 $a[j]>a[i]$,很简单的思路，两个for循环，时间复杂度$O(n^2)$</i$></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">    read(a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">        <span class="keyword">if</span>(a[j]&gt;a[i]) ans++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但我相信没有人会在看到这样的数据规模还真会的码一遍暴力，更何况这都已经放在分治区了，在看到题解后我们就会成功学会了归并排序，又见识到了离散化+树状数组的骚操作</p><h4 id="（完）"><a href="#（完）" class="headerlink" title="（完）"></a>（完）</h4><hr><h2 id="正言"><a href="#正言" class="headerlink" title="正言"></a>正言</h2><p> 但这样就真的完了吗？作为一个善于思考的蒟蒻，我们不能被思维所定式，难道没有其他解决方案吗？</p><p>回到我们的思维起点: <strong>对于每个数$a[i]$找出$j<i$ ,并且 $a[j]>a[i]$</i$></strong></p><p>这里的 <strong>找</strong> 如果用<code>for</code>循环实现，那么时间复杂度就是$O(n)$<br>有没有一种方法可以用更短的时间找出所以比$a[i]$小的数呢？<br>我们都知道在 <strong>有序序列</strong> 中，用二分可以在$O(logn)$的时间内找出比$a[i]$小的最大数的下标<code>x</code>,那么<code>x</code>便是对于当前所有关于$a[i]$的逆序对的个数，可是如果边排序边找，反而需要更多的时间了，我们假想有没有这样一种可以<strong>动态维护</strong>的有序序列  </p><p>至此，我们就可以引出今天的主角了:</p><h1 id="排序二叉树-Binary-Search-Tree"><a href="#排序二叉树-Binary-Search-Tree" class="headerlink" title="排序二叉树(Binary Search Tree)"></a>排序二叉树(Binary Search Tree)</h1><p>是不是听起很高大上，但是没关系，<strong>朴素的BST</strong>就像二分一样容易实现</p><h2 id="BST的性质"><a href="#BST的性质" class="headerlink" title="BST的性质"></a>BST的性质</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">任意结点的左子树中的元素都比右子树小</span><br><span class="line">左，右子树仅为排序二叉树</span><br></pre></td></tr></table></figure><p>但我们即使知道有这样一种数据结构又有何用？<br>举个例子，现在就有一棵排序二叉树：<br><img src="https://i.loli.net/2019/03/10/5c83e9495cdaf.png" alt><br>假定我们有一个元素$5$,如何找比它大的元素的个数呢？<br>别急，我们先试试把$5$插入到这棵树中<br>首先$5$比$7$小，所以为了维护BST的性质，我们先把$5$放在$7$的左子树，再来，$5$比$4$大，所以我们再把$5$放到$4$的右子树中…   </p><p>最后，如果子树为空，就创立叶节点<br>那么插入$5$后的树应该是这样的:<br><img src="https://i.loli.net/2019/03/10/5c83ea2ab1ea9.png" alt>  </p><p>我们再手算一下$5$逆序对的个数：$4$<br>这和树又有什么关系吗？<br>显然，我们发现<strong>由于右子树一定比左子树大</strong>，所以当元素向左插入时，<strong>右子树及其父节点就一定比这个数大</strong>，那么<strong>右子树及其父节点数就是这一层的逆序对数</strong>，当节点插入完成时，也就可以找到所以的逆序对数了，<strong>特殊地，当父节点与插入元素相等时，应放在右子树</strong>(想一想为什么？)</p><p>例如：当$5$在插入第一层时，由于比$7$小，所以此时有$3$个逆序对，在统计节点数时我们不必遍历整棵右子树，只需附加一个<code>chr_node</code>来表示右子树及其根节点数，并进行维护</p><p>那么，基此，我们就有了一个大概的递归算法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">插入元素时,若它比父节点小,那么ans加该节点及其右子树的元素个数,并将其递归调用到左子树中;</span><br><span class="line">否则维护该节点右子树的节点个数(即 chr_node++; ),并递归调用到右子树中</span><br><span class="line">当节点的左(或右)子树为空时,插入节点,并将其指针(下标)保存到父节点中</span><br></pre></td></tr></table></figure></p><hr><p><strong>我们再用结构体保存节点：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ch[<span class="number">2</span>];        <span class="comment">//ch[0]和ch[1]分别代表左右子节点</span></span><br><span class="line">    <span class="keyword">int</span> data,chr_node;</span><br><span class="line">    node() &#123; ch[<span class="number">0</span>]=ch[<span class="number">1</span>]=<span class="number">-1</span>; chr_node=<span class="number">1</span>; &#125;</span><br><span class="line">    <span class="comment">//chr_node代表该节点及其右子树元素个数,-1代表空指针</span></span><br><span class="line">&#125;tree[<span class="number">500010</span>];</span><br></pre></td></tr></table></figure></p><hr><p>插入代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> d,<span class="keyword">int</span> ch=<span class="number">0</span>)</span> </span>&#123;              <span class="comment">//ch为节点指针</span></span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="number">-1</span>) &#123;</span><br><span class="line">        tree[en].data=d;</span><br><span class="line">        <span class="keyword">return</span> ch=en++;                   <span class="comment">//创造叶节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(d&lt;tree[ch].data) &#123;</span><br><span class="line">        ans+=tree[ch].chr_node;           <span class="comment">//统计逆序对个数</span></span><br><span class="line">        tree[ch].ch[<span class="number">0</span>]=insert(d,tree[ch].ch[<span class="number">0</span>]);  <span class="comment">//保存左儿子,虽然对某些节点做了无用功</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        tree[ch].chr_node++;              <span class="comment">//维护右子树节点个数</span></span><br><span class="line">        tree[ch].ch[<span class="number">1</span>]=insert(d,tree[ch].ch[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以根据<strong>树的对称性</strong>进行压行(实在懒得改了<br>然后就大概能AC了，为什么说大概呢？<br>当构造出的树<strong>接近完全二叉树</strong>时,时间复杂度为O(nlogn),若数据<strong>几乎单调</strong>时,这时的树<strong>几乎是一条链</strong>,插入复杂度为O(n),总复杂度为O(n^2),但可以通过<strong>旋转</strong>构造<strong>平衡树</strong><br>但<del>由于数据比较水</del>，玄学地A了!!!(虽然跑的比归并慢了一倍</p><p><a href="https://www.luogu.org/recordnew/show/16816700" target="_blank" rel="noopener">2439m/s</a>  </p><p>另外，当遇到相同元素时，也可以<strong>提前结束递归以减少树的高度</strong>，降低查找与插入的时间，对策是在<code>void insert(int d, int ch =0)</code>中加入：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(d==tree[ch].data) &#123;</span><br><span class="line">    <span class="keyword">int</span> t=tree[ch].ch[<span class="number">1</span>];</span><br><span class="line">    ans+=(t==<span class="number">-1</span>)?<span class="number">0</span>:tree[t].chr_node; </span><br><span class="line">    tree[ch].chr_node++; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(想一想为什么？)</p><h2 id="后言-对我一样的蒟蒻及其不友好"><a href="#后言-对我一样的蒟蒻及其不友好" class="headerlink" title="后言(对我一样的蒟蒻及其不友好"></a>后言(对我一样的蒟蒻及其不友好</h2><p>如果用treap的话，常数和空间都比较大<br>这里给出<a href="https://www.luogu.org/recordnew/show/17058950" target="_blank" rel="noopener"><strong>treap</strong></a>的代码，感兴趣的OIer可以参照蓝书和洛谷日报,以及其他大佬的题解<br>注释版：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,r,s;</span><br><span class="line">    node *ch[<span class="number">2</span>];</span><br><span class="line">    node() &#123; ch[<span class="number">0</span>]=ch[<span class="number">1</span>]=<span class="literal">NULL</span>; s=<span class="number">1</span>; &#125;</span><br><span class="line">    <span class="comment">//s为包括自身的左右子树的总节点数</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==v) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> x&gt;v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用函数计算出方向，-1的话就表示重复了，不插入了</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ch_node</span><span class="params">(<span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (ch[d]==<span class="literal">NULL</span>)?<span class="number">0</span>:ch[d]-&gt;s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//即不包括父节点的左/右(0/1)子树节点数</span></span><br><span class="line">&#125;treap[<span class="number">500010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> en=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//0代表左旋,1代表右右旋，参照蓝书</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(node* &amp;o,<span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    node *k=o-&gt;ch[d^<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> o1=o-&gt;s - o-&gt;ch_node(d^<span class="number">1</span>),k1=k-&gt;s - k-&gt;ch_node(d);</span><br><span class="line">    <span class="comment">//这一步可以自己画草图了解一下,利用了对称性压行,维护子节点数，自己想一想</span></span><br><span class="line">    o-&gt;ch[d^<span class="number">1</span>]=k-&gt;ch[d];</span><br><span class="line">    k-&gt;ch[d]=o;</span><br><span class="line">    k-&gt;s+=o1; o-&gt;s-=k1;</span><br><span class="line">    o=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node* &amp;o,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(o==<span class="literal">NULL</span>) &#123; o=&amp;(treap[en++]); o-&gt;v=x; o-&gt;r=rand(); &#125;</span><br><span class="line">    <span class="comment">//插入节点,利用随机化并维护堆的性质,确保树的高度不会太高</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> d=o-&gt;cmp(x);</span><br><span class="line">        <span class="keyword">if</span>(d==<span class="number">-1</span>) &#123; ans+=o-&gt;ch_node(<span class="number">1</span>); o-&gt;s++; <span class="keyword">return</span>; &#125;<span class="comment">//利用了上面的结论</span></span><br><span class="line">        <span class="keyword">if</span>(!d) ans+=o-&gt;s - o-&gt;ch_node(<span class="number">0</span>);   <span class="comment">//右子树及其根节点=总结点个数-左节点个数!=o-&gt;ch_node(1)+1，想一想为什么？</span></span><br><span class="line">        insert(o-&gt;ch[d],x);</span><br><span class="line">        o-&gt;s++;</span><br><span class="line">        <span class="keyword">if</span>(o-&gt;ch[d]-&gt;r &gt; o-&gt;r) rotate(o,d^<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//先插入，再维护节点数以及树的平衡</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c,f=<span class="number">1</span>;  a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=getchar()))  &#123;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'-'</span>) f=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        a=a*<span class="number">10</span>+c-<span class="string">'0'</span>;</span><br><span class="line">        c=getchar();</span><br><span class="line">    &#125;<span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>);</span><br><span class="line">    <span class="keyword">return</span> a*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,x;</span><br><span class="line">    node root;  <span class="comment">//虚拟根节点,防止真正根节点因旋转改变而丢失，避免了手动插入根节点</span></span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) insert(root.ch[<span class="number">0</span>],read(x));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>&amp;<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>给一张草图体会旋转时节点数的变换吧 <del>(笑哭</del>  </p><h2 id="草图"><a href="#草图" class="headerlink" title="草图 "></a><a href="https://i.loli.net/2019/03/10/5c83f93931a5b.png" target="_blank" rel="noopener"><strong>草图</strong></a> </h2><p><del>看在我这么认真的份上求通过吧<strong>QWQ</strong></del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P1908&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原题&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;面对蒟蒻的逆序对&quot;&gt;&lt;a href=&quot;#面对蒟蒻的逆序对&quot; class=&quot;headerlink&quot; title=&quot;面对蒟蒻的逆序对&quot;&gt;&lt;/a&gt;面对&lt;del&gt;蒟蒻&lt;/del&gt;的逆序对&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一看到题，我们脑海中的第一想法一定就是暴力,&lt;br&gt;
    
    </summary>
    
    
      <category term="BST" scheme="http://zljust.github.io/tags/BST/"/>
    
      <category term="note" scheme="http://zljust.github.io/tags/note/"/>
    
  </entry>
  
</feed>
